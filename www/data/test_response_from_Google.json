{
	"responseData":{
		"feed":{
			"feedUrl":"http://blog.codinghorror.com/rss/",
			"title":"Coding Horror",
			"link":"http://blog.codinghorror.com/",
			"author":"",
			"description":"programming and human factors",
			"type":"rss20",
			"entries":[
				{
					"title":"Doing Terrible Things To Your Code",
					"link":"http://blog.codinghorror.com/doing-terrible-things-to-your-code/",
					"author":"Jeff Atwood",
					"publishedDate":"Thu, 30 Jul 2015 02:31:49 -0700",
					"contentSnippet":"In 1992, I thought I was the best programmer in the world. In my defense, I had just graduated from college, this was ...",
					"content":"<p>In 1992, I thought <a href=\"http://blog.codinghorror.com/why-im-the-best-programmer-in-the-world/\">I was the best programmer in the world</a>. In my defense, I had just graduated from college, this was pre-Internet, and I lived in Boulder, Colorado working in small business jobs where I was lucky to even <em>hear</em> about other programmers much less meet them.</p>\n\n<p>I eventually fell in with a guy named Bill O'Neil, who hired me to do contract programming. He formed a company with the regrettably generic name of <em>Computer Research &amp; Technologies</em>, and we proceeded to work on various gigs together, building line of business CRUD apps in Visual Basic or FoxPro running on Windows 3.1 (and sometimes DOS, though we had a sense by then that this new-fangled GUI thing was here to stay).</p>\n\n<p>Bill was the first professional programmer I had ever worked with. Heck, for that matter, he was the first <em>programmer</em> I ever worked with. He'd spec out some work with me, I'd build it in Visual Basic, and then I'd hand it over to him for review. He'd then calmly proceed to utterly <em>demolish</em> my code:</p>\n\n<ul>\n<li>Tab order? Wrong.</li>\n<li>Entering a number instead of a string? Crash.</li>\n<li>Entering a date in the past? Crash.</li>\n<li>Entering too many characters? Crash.</li>\n<li>UI element alignment? Off.</li>\n<li>Does it work with unusual characters in names like, say, <code>O'Neil</code>? Nope.</li>\n</ul>\n\n<p>One thing that surprised me was that the code itself was rarely the problem. He occasionally had some comments about the way I wrote or structured the code, but <strong>what I clearly had no idea about is <em>testing</em> my code.</strong></p>\n\n<p>I dreaded handing my work over to him for inspection. I slowly, painfully learned that the truly difficult part of coding is dealing with the thousands of ways things can go wrong with your application at any given time – most of them user related.</p>\n\n<p><a href=\"http://www.mrlovenstein.com/comic/364\"><img src=\"http://blog.codinghorror.com/content/images/2015/07/364_placebo_effective.png\" alt=\"\" title=\"\"></a></p>\n\n<p>That was my first experience with <a href=\"http://blog.codinghorror.com/whos-your-coding-buddy/\">the buddy system</a>, and thanks to Bill, I came out of that relationship with a deep respect for software craftsmanship. I have no idea what Bill is up to these days, but I tip my hat to him, wherever he is. I didn't always enjoy it, but learning to develop discipline around testing (and breaking) my own stuff unquestionably made me a better programmer.</p>\n\n<p>It's tempting to lay all this responsibility at the feet of the mythical QA engineer. </p>\n\n<blockquote lang=\"en\"><p lang=\"nl\" dir=\"ltr\">QA Engineer walks into a bar. Orders a beer. Orders 0 beers. Orders 999999999 beers. Orders a lizard. Orders -1 beers. Orders a sfdeljknesv.</p>— Bill Sempf (@sempf) <a href=\"https://twitter.com/sempf/status/514473420277694465\">September 23, 2014</a></blockquote>  \n\n\n\n<p>If you are ever lucky enough to work with one, <a href=\"http://blog.codinghorror.com/making-developers-cry-since-1995/\">you should have a very, <em>very</em> healthy fear of professional testers</a>. They are terrifying. Just scan this <a href=\"http://blogs.msdn.com/b/micahel/archive/2004/07/07/did-i-remember-to.aspx\">\"Did I remember to test\" list</a> and you'll be having the worst kind of flashbacks in no time. Did I mention that's the abbreviated version of his list?</p>\n\n<p>I believe a key turning point in every professional programmer's working life is when you realize <a href=\"http://blog.codinghorror.com/on-the-meaning-of-coding-horror/\">you are your own worst enemy</a>, and the only way to mitigate that threat is to embrace it. <em>Act</em> like your own worst enemy. <strong>Break your UI. Break your code. Do <em>terrible</em> things to your software.</strong> </p>\n\n<p>This means programmers need a good working knowledge of at least the <em>common</em> mistakes, the frequent cases that average programmers tend to miss, to work against. You are tester zero. This is your responsibility.</p>\n\n<p>Let's start with Patrick McKenzie's classic <a href=\"http://www.kalzumeus.com/2010/06/17/falsehoods-programmers-believe-about-names/\">Falsehoods Programmers Believe about Names</a>:</p>\n\n<ol>\n<li>People have exactly one canonical full name.  </li>\n<li>People have exactly one full name which they go by.  </li>\n<li>People have, at this point in time, exactly one canonical full name.  </li>\n<li>People have, at this point in time, one full name which they go by.  </li>\n<li>People have exactly N names, for any value of N.  </li>\n<li>People’s names fit within a certain defined amount of space.  </li>\n<li>People’s names do not change.  </li>\n<li>People’s names change, but only at a certain enumerated set of events.  </li>\n<li>People’s names are written in ASCII.  </li>\n<li>People’s names are written in any single character set.</li>\n</ol>\n\n<p>That's just the first 10. There are <a href=\"http://www.kalzumeus.com/2010/06/17/falsehoods-programmers-believe-about-names/\">thirty more</a>. Plus a lot in the comments if you're in the mood for extra credit. Or, how does <a href=\"http://infiniteundo.com/post/25326999628/falsehoods-programmers-believe-about-time\">Falsehoods Programmers Believe About Time</a> grab you?</p>\n\n<ol>\n<li>There are always 24 hours in a day.  </li>\n<li>Months have either 30 or 31 days.  </li>\n<li>Years have 365 days.  </li>\n<li>February is always 28 days long.  </li>\n<li>Any 24-hour period will always begin and end in the same day (or week, or month).  </li>\n<li>A week always begins and ends in the same month.  </li>\n<li>A week (or a month) always begins and ends in the same year.  </li>\n<li>The machine that a program runs on will always be in the GMT time zone.  </li>\n<li>Ok, that’s not true. But at least the time zone in which a program has to run will never change.  </li>\n<li>Well, surely there will never be a change to the time zone in which a program has to run in production.  </li>\n<li>The system clock will always be set to the correct local time.  </li>\n<li>The system clock will always be set to a time that is not wildly different from the correct local time.  </li>\n<li>If the system clock is incorrect, it will at least always be off by a consistent number of seconds.  </li>\n<li>The server clock and the client clock will always be set to the same time.  </li>\n<li>The server clock and the client clock will always be set to around the same time.</li>\n</ol>\n\n<p>Are there more? Of <a href=\"http://infiniteundo.com/post/25326999628/falsehoods-programmers-believe-about-time\">course there are</a>! There's even <a href=\"http://infiniteundo.com/post/25509354022/more-falsehoods-programmers-believe-about-time\">a whole additional list of stuff <em>he</em> forgot</a> when he put that giant list together. </p>\n\n<p><a href=\"http://www.stilldrinking.org/programming-sucks\"><img src=\"http://blog.codinghorror.com/content/images/2015/07/code-horror-1.png\" alt=\"Catastrophic Error - User attempted to use program in the manner program was meant to be used\" title=\"\"></a></p>\n\n<p>I think you can see where this is going. This is programming. <a href=\"http://www.stilldrinking.org/programming-sucks\">We do this stuff for fun, remember?</a></p>\n\n<p>But in true made-for-TV fashion, wait, there's more! Seriously, guys, where are you going? Get back here. We have more awesome failure states to learn about:</p>\n\n<ul>\n<li><p><a href=\"http://wiesmann.codiferes.net/wordpress/?p=15187&amp;lang=en\">Falsehoods Programmers Believe About Geography</a></p></li>\n<li><p><a href=\"https://www.mjt.me.uk/posts/falsehoods-programmers-believe-about-addresses/\">Falsehoods Programmers Believe About Addresses</a></p></li>\n<li><p><a href=\"http://www.cscyphers.com/blog/2012/06/28/falsehoods-programmers-believe-about-gender/\">Falsehoods Programmers Believe About Gender</a></p></li>\n</ul>\n\n<p>At this point I wouldn't blame you if you decided to <a href=\"http://blog.codinghorror.com/so-you-dont-want-to-be-a-programmer-after-all/\">quit programming altogether</a>. But I think it&#39;s better if we learn to do for each other what Bill did for me, twenty years ago — teach less experienced developers that <strong>a good programmer knows they <em>have</em> to do terrible things to their code</strong>. Do it because if you don't, I guarantee you other people will, and when they do, they will either walk away or create a support ticket. I'm not sure which is worse.</p>\n\n<table>  \n<tr><td>  \n[advertisement] <a href=\"http://careers.stackoverflow.com\" rel=\"nofollow\">Find a better job the Stack Overflow way</a> - what you need when you need it, no spam, and no scams.\n</td></tr>  \n</table>",
					"categories":[]
				},
				{
					"title":"What is Trolling?",
					"link":"http://blog.codinghorror.com/what-is-trolling/",
					"author":"Jeff Atwood",
					"publishedDate":"Thu, 30 Apr 2015 02:11:15 -0700",
					"contentSnippet":"If you engage in discussion on the Internet long enough, you're bound to encounter it: someone calling someone else a troll. ...",
					"content":"<p>If you engage in discussion on the Internet long enough, you're bound to encounter it: someone calling someone else a troll. </p>\n\n<p>The common interpretation of Troll is the Grimms' Fairy Tales, Lord of the Rings, \"hangs out under a bridge\" type of troll.</p>\n\n<p><img src=\"http://blog.codinghorror.com/content/images/2015/04/obvious-troll-is-obvious.jpg\" alt=\"\"></p>\n\n<p>Thus, a troll is someone who exists to hurt people, cause harm, and break a bunch of stuff because that&#39;s something brutish trolls just … do, isn&#39;t it?</p>\n\n<p>In that sense, calling someone a Troll is not so different from the pre-Internet tactic of calling someone a monster – implying that they lack all the self-control and self-awareness a normal human being would have.</p>\n\n<p>Pretty harsh.</p>\n\n<p><img src=\"http://blog.codinghorror.com/content/images/2015/04/no-trolls.png\" alt=\"\"></p>\n\n<p>That might be what the term is evolving to mean, but it's not the original intent.</p>\n\n<p>The <em>original</em> definition of troll was <a href=\"http://www.merriam-webster.com/dictionary/troll\">not a beast, but a fisherman</a>:</p>\n\n<blockquote>\n  <p><strong>Troll</strong></p>\n  \n  <p><em>verb</em> \\ˈtrōl\\</p>\n  \n  <ol>\n  <li><p>to fish with a hook and line that you pull through the water</p></li>\n  <li><p>to search for or try to get (something)</p></li>\n  <li><p>to search through (something)</p></li>\n  </ol>\n</blockquote>\n\n<p>If you're curious why the fishing metaphor is so apt, check out this interview:</p>\n\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/GrsJDy8VjZk\" frameborder=\"0\" allowFullScreen=\"\"></iframe>\n\n<p>There's so much fishing going on here someone should have probably applied for a permit first.</p>\n\n<ul>\n<li><p><strong>He engages in the interview just enough to get the other person to argue.</strong> From there, he fishes for anything that can nudge the argument into some kind of car wreck that everyone can gawk at, generating lots of views and publicity.</p></li>\n<li><p><strong>He isn't interested in learning anything about the movie</strong>, or getting any insight, however fleeting, into this celebrity and how they approached acting or directing. Those are perfunctory concerns, quickly discarded on the way to their true goal: generating controversy, the more the better.</p></li>\n</ul>\n\n<p>I almost feel sorry for Quentin Tarantino, who is so obviously passionate about what he does, because this guy is a classic troll.</p>\n\n<ol>\n<li>He came to generate argument.  </li>\n<li>He doesn't truly care about the topic.</li>\n</ol>\n\n<p>Some trolls can <em>seem</em> to care about a topic, because they hold extreme views on it, and will hold forth at great length on said topic, in excruciating detail, to anyone who will listen. For days. Weeks. Months. But this is an illusion.</p>\n\n<p>The most striking characteristic of the worst trolls is that their position on a given topic is absolutely written in stone, immutable, and they will defend said position to the death in the face of any criticism, evidence, or reason. </p>\n\n<p><img src=\"http://blog.codinghorror.com/content/images/2015/04/are-you-not-entertained.jpg\" alt=\"\"></p>\n\n<p>Look. I'm not new to the Internet. I know nobody has ever convinced anybody to change their mind about anything through mere online discussion before. It's unpossible. </p>\n\n<p>But I love discussion. And in any discussion that has a purpose other than gladiatorial opinion bloodsport, the most telling question you can ask of anyone is this:</p>\n\n<blockquote>\n  <p><em>Why are you here?</em></p>\n</blockquote>\n\n<p>Did you join this discussion to learn? To listen? To understand other perspectives? Or are you here to berate us and recite your talking points over and over? Are you more interested in fighting over who is right than actually communicating? </p>\n\n<p>If you <em>really</em> care about a topic, you should want to learn as much as you can about it, to understand its boundaries, and the endless perspectives and details that make up any interesting topic. Heck, I don't even <em>want</em> anyone to change your mind. But you do have to demonstrate to us that you are at least <em>somewhat</em> willing to entertain other people's perspectives, and potentially evolve your position on the topic to a more nuanced, complex one over time.</p>\n\n<p>In other words, <strong>are you here in good faith?</strong> </p>\n\n<p>People whose actions demonstrate that they are participating in bad faith – whether they are on the &quot;right&quot; side of the debate or not – <a href=\"http://blog.codinghorror.com/your-community-door/\">need to be shown the door</a>.</p>\n\n<p>So now you know how to identify a troll, at least by the classic definition. But how do you handle a troll? </p>\n\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/gYrporR9hHE\" frameborder=\"0\" allowFullScreen=\"\"></iframe>\n\n<p><strong>You walk away.</strong></p>\n\n<p>I'm afraid I don't have anything uniquely insightful to offer over that old chestnut, \"Don't feed the trolls.\" Responding to a troll just gives them evidence of their success for others to enjoy, and powerful incentive to try it again to get a rise out of the next sucker and satiate their perverse desire for opinion bloodsport. Someone has to break the chain.</p>\n\n<p>I'm all for giving people the benefit of the doubt. Just because someone has a controversial opinion, or seems kind of argumentative (<a href=\"http://blog.codinghorror.com/in-defense-of-the-smackdown-learning-model/\">guilty</a>, by the way), doesn't automatically make them a troll. But their actions over time <em>might</em>.</p>\n\n<p>(I also recognize that in matters of social justice, <a href=\"http://www.dailydot.com/opinion/phillips-dont-feed-trolls-antisocial-web/\">there is sometimes value in speaking out and speaking up</a>, versus walking away.) </p>\n\n<p>So the next time you encounter someone who can&#39;t stop arguing, who seems unable to generate anything other than heat and friction, whose actions amply demonstrate that they are no longer participating in the conversation in good faith … just walk away. Don&#39;t take the bait.</p>\n\n<p>Even if sometimes, that troll is you.</p>\n\n<table>  \n<tr><td>  \n[advertisement] How are you showing off your awesome? Create a <a href=\"http://careers.stackoverflow.com/cv\" rel=\"nofollow\">Stack Overflow Careers profile</a> and show off all of your hard work from Stack Overflow, Github, and virtually every other coding site. Who knows, you might even get recruited for a great <a href=\"http://careers.stackoverflow.com/jobs\" rel=\"nofollow\">new position</a>!\n</td></tr>  \n</table>",
					"categories":[]
				},
				{
					"title":"Your Password is Too Damn Short",
					"link":"http://blog.codinghorror.com/your-password-is-too-damn-short/",
					"author":"Jeff Atwood",
					"publishedDate":"Thu, 23 Apr 2015 15:30:54 -0700",
					"contentSnippet":"I'm a little tired of writing about passwords. But like taxes, email, and pinkeye, they're not going away any time soon. Here's ...",
					"content":"<p>I'm a <a href=\"https://www.google.com/webhp?ie=UTF-8#q=site:codinghorror.com+passwords\">little tired of writing about passwords</a>. But like taxes, email, and pinkeye, they're not going away any time soon. Here's what I know to be true, and backed up by plenty of empirical data:</p>\n\n<ul>\n<li><p>No matter what you tell them, users will always choose simple passwords.</p></li>\n<li><p>No matter what you tell them, users will re-use the same password over and over on multiple devices, apps, and websites. If you are lucky they might use a couple passwords instead of the same one.</p></li>\n</ul>\n\n<p>What can we do about this as developers?</p>\n\n<ul>\n<li><p><strong>Stop requiring passwords altogether</strong>, and let people log in with Google, Facebook, Twitter, Yahoo, or any other valid form of <a href=\"http://blog.codinghorror.com/your-internet-drivers-license/\">Internet driver's license</a> that you're comfortable supporting. The best password is <a href=\"http://blog.codinghorror.com/the-god-login/\">one you don't have to store</a>.</p></li>\n<li><p>Urge browsers to support <a href=\"http://blog.codinghorror.com/cutting-the-gordian-knot-of-web-identity/\">automatic, built-in password generation and management</a>. Ideally supported by the OS as well, but this requires cloud storage and everyone on the same page, and that seems most likely to me per-browser. Chrome, at least, is <a href=\"https://www.chromium.org/developers/design-documents/password-generation\">moving in this direction</a>. </p></li>\n<li><p>Nag users at the time of signup when they enter passwords that are …</p>\n\n<ul><li><p>Too short: <code>UY7dFd</code></p></li>\n<li><p>Lack sufficient entropy: <code>aaaaaaaaa</code></p></li>\n<li><p>Match common dictionary words: <code>anteaters1</code></p></li></ul></li>\n</ul>\n\n<p>This is commonly done with <a href=\"https://blogs.dropbox.com/tech/2012/04/zxcvbn-realistic-password-strength-estimation/\">an ambient password strength meter</a>, which provides real time feedback as you type.</p>\n\n<p><img src=\"http://blog.codinghorror.com/content/images/2015/04/password-strength-meters.png\" alt=\"\"></p>\n\n<p>If you can&#39;t avoid storing the password – the first two items I listed above are both about <strong>avoiding the need for the user to select a 'new' password altogether</strong> – then showing an estimation of password strength as the user types is about as good as it gets.</p>\n\n<p>The easiest way to build a safe password is to make it long. All other things being equal, the law of exponential growth means a longer password is a better password. That's why I was <a href=\"http://blog.codinghorror.com/passphrase-evangelism/\">always a fan of passphrases</a>, though they are exceptionally painful to enter via touchscreen in our brave new world of mobile – and that is an increasingly critical flaw. <strong>But how short is too short?</strong> </p>\n\n<p>When we built <a href=\"http://www.discourse.org\">Discourse</a>, I had to select an absolute minimum password length that we would accept. I chose a default of 8, based on what I knew from my <a href=\"http://blog.codinghorror.com/speed-hashing/\">speed hashing research</a>. An eight character password isn't <em>great</em>, but as long as you use a reasonable variety of characters, it should be sufficiently resistant to attack.</p>\n\n<p>By attack, I don't mean an attacker automating a web page or app to repeatedly enter passwords. There is some of this, for <a href=\"http://arstechnica.com/security/2015/01/yes-123456-is-the-most-common-password-but-heres-why-thats-misleading/\">extremely common passwords</a>, but that's unlikely to be a practical attack on many sites or apps, as they tend to have rate limits on how often and how rapidly you can try different passwords.</p>\n\n<p>What I mean by attack is <strong>a high speed offline attack on the hash of your password</strong>, where an attacker gains access to a database of leaked user data. This kind of leak happens all the time. And it will continue to happen forever.</p>\n\n<p>If you're really unlucky, the developers behind that app, service, or website stored the password in plain text. This thankfully doesn't happen too often any more, <a href=\"http://plaintextoffenders.com/\">thanks to education efforts</a>. Progress! But even if the developers did properly store a hash of your password instead of the actual password, you better pray they used a really slow, complex, memory hungry hash algorithm, <a href=\"http://codahale.com/how-to-safely-store-a-password/\">like bcrypt</a>. And that they selected a <a href=\"http://security.stackexchange.com/questions/3959/recommended-of-iterations-when-using-pkbdf2-sha256/3993\">high number of iterations</a>. Oops, sorry, that was written in the dark ages of 2010 and is now out of date. I <a href=\"http://chargen.matasano.com/chargen/2015/3/26/enough-with-the-salts-updates-on-secure-password-schemes.html\">meant to say scrypt</a>. Yeah, <a href=\"http://en.wikipedia.org/wiki/Scrypt\">scrypt</a>, that's the ticket. </p>\n\n<p>Then we're safe? Right? Let's see.</p>\n\n<ul>\n<li><p>Start with a <a href=\"https://www.random.org/passwords/\">a truly random 8 character password</a>. Note that 8 characters is the default size of the generator, too. I got <code>U6zruRWL</code>.</p></li>\n<li><p>Plug it into the <a href=\"https://www.grc.com/haystack.htm\">GRC password crack checker</a>.</p></li>\n<li><p>Read the \"Massive Cracking Array\" result, which is <strong>2.2 seconds</strong>.</p></li>\n<li><p>Go lay down and put a warm towel over your face.</p></li>\n</ul>\n\n<p>You might read this and think that a massive cracking array is something that's hard to achieve. I regret to inform you that building an array of, say, 24 consumer grade GPUs that are optimized for speed hashing, is <em>well</em> within the reach of the average law enforcement agency and pretty much any small business that can afford a $40k equipment charge. No need to buy when you can rent – plenty of GPU equipped cloud servers these days. Beyond that, imagine what a motivated nation-state could bring to bear. The mind boggles.</p>\n\n<p><a href=\"https://fsfe.org/contribute/spreadtheword.html\"><img src=\"http://blog.codinghorror.com/content/images/2015/04/there-is-no-cloud.png\" alt=\"\" title=\"\"></a></p>\n\n<p>Even if you don't believe me, <em>but you should</em>, the offline fast attack scenario, much easier to achieve, was hardly any better at <strong>37 minutes</strong>. </p>\n\n<p>Perhaps you're a skeptic. That's great, <a href=\"http://skeptics.stackexchange.com/\">me too</a>. What happens when we try a longer random.org password on the massive cracking array?</p>\n\n<table width=\"300px\">  \n<tr><td>9 characters</td><td>2 minutes</td></tr>  \n<tr><td>10 characters</td><td>2 hours</td></tr>  \n<tr><td>11 characters</td><td>6 days</td></tr>  \n<tr><td>12 characters</td><td>1 year</td></tr>  \n<tr><td>13 characters</td><td>64 years</td></tr>  \n</table>\n\n<p>The random.org generator is \"only\" uppercase, lowercase, and number. What if we add special characters, to <a href=\"http://blog.codinghorror.com/regex-use-vs-regex-abuse/\">keep Q*Bert happy</a>?</p>\n\n<table width=\"300px\">  \n<tr><td>8 characters</td><td>1 minute</td></tr>  \n<tr><td>9 characters</td><td>2 hours</td></tr>  \n<tr><td>10 characters</td><td>1 week</td></tr>  \n<tr><td>11 characters</td><td>2 years</td></tr>  \n<tr><td>12 characters</td><td>2 centuries</td></tr>  \n</table>\n\n<p>That's a bit better, but you can't really feel safe until the 12 character mark even with a full complement of uppercase, lowercase, numbers, <em>and</em> special characters.</p>\n\n<p>It's unlikely that massive cracking scenarios will get any slower. While there is definitely a password length where all cracking attempts fall off an exponential cliff that is effectively unsurmountable, these numbers will only get <em>worse</em> over time, not better.</p>\n\n<p>So after all that, here's what I came to tell you, the poor, beleagured user:</p>\n\n<p><img src=\"http://blog.codinghorror.com/content/images/2015/04/your-password-is-too-damn-short.jpg\" alt=\"\"></p>\n\n<p><strong>Unless your password is at <em>least</em> 12 characters, you are vulnerable.</strong></p>\n\n<p>That should be the minimum password size you use on any service. Generate your password with some kind of offline generator, <a href=\"http://world.std.com/~reinhold/diceware.html\">with diceware</a>, or your own home-grown method of adding words and numbers and characters together – whatever it takes, but <em>make sure your passwords are all at least 12 characters</em>.</p>\n\n<p>Now, to be fair, as I alluded to earlier all of this does <a href=\"http://chargen.matasano.com/chargen/2015/3/26/enough-with-the-salts-updates-on-secure-password-schemes.html\">depend heavily on the hashing algorithm that was selected</a>. But you have to assume that every password you use will be hashed with the lamest, fastest hash out there. One that is <a href=\"https://hashcat.net/forum/thread-3687.html\">easy for GPUs to calculate</a>. There's a <em>lot</em> of old software and systems out there, and will be for a long, long time.</p>\n\n<p><img src=\"http://blog.codinghorror.com/content/images/2015/04/gpu-tries-per-sec.png\" alt=\"\"></p>\n\n<p>And for developers:</p>\n\n<ol>\n<li><p>Pick your new password hash algorithms carefully, and move all your old password hashing systems to much harder to calculate hashes. <strong>You need hashes that are <em>specifically designed to be hard to calculate on GPUs</em>, like scrypt.</strong></p></li>\n<li><p>Even if you pick the \"right\" hash, you may be vulnerable if your work factor isn't high enough. Matsano recommends the following:</p>\n\n<ul><li><p>scrypt: <code>N=2^14, r=8, p=1</code></p></li>\n<li><p>bcrypt: <code>cost=11</code></p></li>\n<li><p>PBKDF2 with SHA256: <code>iterations=86,000</code></p></li></ul>\n\n<p>But those are just guidelines; <strong>you have to scale the hashing work to what's available and reasonable on <em>your</em> servers or devices.</strong> For example, we had a minor denial of service bug in Discourse where we allowed people to enter up to 20,000 character passwords in the login form, and calculating the hash on that took, uh … several seconds.</p></li>\n</ol>\n\n<p>Now if you'll excuse me, I need to go change my PayPal password. </p>\n\n<table>  \n<tr><td>  \n[advertisement] What's your next career move? <a href=\"http://careers.stackoverflow.com/\" rel=\"nofollow\">Stack Overflow Careers</a> has the best job listings from great companies, whether you're looking for opportunities at a startup or Fortune 500. You can search our <a href=\"http://careers.stackoverflow.com/jobs\" rel=\"nofollow\">job listings</a> or <a href=\"http://careers.stackoverflow.com/cv\" rel=\"nofollow\">create a profile</a> and let employers find you.\n</td></tr>  \n</table>",
					"categories":[]
				},
				{
					"title":"Given Enough Money, All Bugs Are Shallow",
					"link":"http://blog.codinghorror.com/given-enough-money-all-bugs-are-shallow/",
					"author":"Jeff Atwood",
					"publishedDate":"Fri, 03 Apr 2015 16:58:20 -0700",
					"contentSnippet":"Eric Raymond, in The Cathedral and the Bazaar, famously wrote\n\n\n  Given enough eyeballs, all bugs are shallow.\n\n\nThe idea is ...",
					"content":"<p>Eric Raymond, in <a href=\"http://en.wikipedia.org/wiki/The_Cathedral_and_the_Bazaar\">The Cathedral and the Bazaar</a>, famously wrote</p>\n\n<blockquote>\n  <p>Given enough eyeballs, all bugs are shallow.</p>\n</blockquote>\n\n<p>The idea is that open source software, by virtue of allowing anyone and everyone to view the source code, is inherently less buggy than closed source software. He dubbed this \"Linus's Law\".</p>\n\n<p><img src=\"http://blog.codinghorror.com/content/images/2015/04/eyeballs.jpg\" alt=\"\"></p>\n\n<p>Insofar as it goes, I believe this is true. When only the 10 programmers who happen to work at your company today can look at your codebase, it's unlikely to be as well reviewed as a codebase that's public to the world's scrutiny on GitHub. </p>\n\n<p>However, the <a href=\"http://en.wikipedia.org/wiki/Heartbleed\">Heartbleed SSL vulnerability</a> was a turning point for Linus's Law, a catastrophic exploit based on <a href=\"http://www.theregister.co.uk/2014/04/09/heartbleed_explained/\">a severe bug in open source software</a>. How catastrophic? It affected about 18% of all the HTTPS websites in the world, and allowed attackers to view all traffic to these websites, unencrypted... <em>for two years</em>.</p>\n\n<p>All those websites you thought were secure? Nope. This bug went unnoticed for two full years.</p>\n\n<p><em>Two years!</em></p>\n\n<p>OpenSSL, the library with this bug, is <strong>one of the most critical bits of Internet infrastructure the world has</strong> – relied on by major companies to encrypt the private information of their customers as it travels across the Internet. OpenSSL was used on millions of servers and devices to protect the kind of important stuff you want encrypted, and hidden away from prying eyes, like passwords, bank accounts, and credit card information.</p>\n\n<p>This should be some of the most well-reviewed code in the world. What happened to our eyeballs, man?</p>\n\n<blockquote>\n  <p>In reality, it&#39;s generally very, very difficult to fix real bugs in anything but the most trivial Open Source software. I know that I have rarely done it, and I am an experienced developer. Most of the time, what really happens is that you tell the actual programmer about the problem and wait and see if he/she fixes it – <a href=\"https://www.neilgunton.com/doc/?o=Sh&amp;doc_id=8585\">Neil Gunton</a></p>\n  \n  <p>Even if a brave hacker communities to read the code, they&#39;re not terribly likely to spot one of the hard-to-spot problems. Why? Few open source hackers are security experts. – <a href=\"http://jeremy.zawodny.com/blog/archives/000028.html\">Jeremy Zawodny</a></p>\n  \n  <p>The fact that many eyeballs are looking at a piece of software is not likely to make it more secure. It is likely, however, to make people believe that it is secure. The result is an open source community that is probably far too trusting when it comes to security. – <a href=\"http://www.developer.com/tech/article.php/626641/The-Myth-of-Open-Source-Security.htm\">John Viega</a></p>\n</blockquote>\n\n<p>I think there are a couple problems with Linus's Law:</p>\n\n<ol>\n<li><p>There's a big difference between <em>usage</em> eyeballs and <em>development</em> eyeballs. Just because you pull down some binaries in a RPM, or compile something in Linux, or even report bugs back to the developers via their bug tracker, doesn't mean you're doing anything at all to contribute to the review of the underlying code. Most eyeballs are looking at the outside of the code, not the inside. And while you can discover bugs, even important security bugs, through usage, the hairiest security bugs require inside knowledge of how the code works.</p></li>\n<li><p>The act of <em>writing</em> (or cut-and-pasting) your own code is easier than understanding and <em>peer reviewing</em> someone else&#39;s code. There is a fundamental, unavoidable asymmetry of work here. The amount of code being churned out today – even if you assume only a small fraction of it is &quot;important&quot; enough to require serious review – far outstrips the number of eyeballs available to look at the code. (Yes, this is another argument in favor of <a href=\"http://blog.codinghorror.com/the-best-code-is-no-code-at-all/\">writing less code</a>.)</p></li>\n<li><p>There are not enough <em>qualified</em> eyeballs to look at the code. Sure, the overall number of programmers is slowly growing, but what percent of those programmers are skilled enough, and have the right security background, to be able to audit someone else's code effectively? A tiny fraction.</p></li>\n</ol>\n\n<p>Even if the code is 100% open source, utterly mission critical, and used by major companies in virtually every public facing webserver for customer security purposes, we end up with critical bugs that compromise everyone. For <em>two years!</em></p>\n\n<p>That's the lesson. If we <strong>can't naturally get enough eyeballs on OpenSSL</strong>, how does any other code stand a chance? What do we do? How do we get more eyeballs?</p>\n\n<p>The short term answer was:</p>\n\n<ul>\n<li><p>Create <a href=\"http://www.libressl.org/\">more alternatives to OpenSSL</a> for ecosystem diversity.</p></li>\n<li><p>Improve <a href=\"http://arstechnica.com/information-technology/2014/04/tech-giants-chastened-by-heartbleed-finally-agree-to-fund-openssl/\">support and funding for OpenSSL</a>. </p></li>\n</ul>\n\n<p>These are both very good things and necessary outcomes. We should be doing this for all the critical parts of the open source ecosystem people rely on.</p>\n\n<p>But what's the long term answer to the general problem of not enough eyeballs on open source code? It's something that will sound very familar to you, though I suspect Eric Raymond won't be too happy about it.</p>\n\n<p><img src=\"http://blog.codinghorror.com/content/images/2015/04/pile-of-money-1.jpg\" alt=\"\"></p>\n\n<p><em>Money.</em> Lots and lots of money.</p>\n\n<p>Increasingly, companies are turning to <strong>commercial bug bounty programs</strong>. Either ones they create themselves, or run through third party services like <a href=\"https://bugcrowd.com/\">Bugcrowd</a>, <a href=\"https://www.synack.com/\">Synack</a>, <a href=\"https://hackerone.com/\">HackerOne</a>, and <a href=\"https://www.crowdcurity.com/\">Crowdcurity</a>. This means you pay per bug, with a larger payout the bigger and badder the bug is.</p>\n\n<p>Or you can attend a yearly event like <a href=\"http://en.wikipedia.org/wiki/Pwn2Own\">Pwn2Own</a>, where there's a yearly contest and massive prizes, as large as <a href=\"http://www.eweek.com/security/hp-awards-240k-for-firefox-ie-chrome-and-safari-exploits.html\">hundreds of thousands of dollars</a>, for exploiting common software. Staging a big annual event means a lot of publicity and interest, attracting the biggest guns.</p>\n\n<p>That's the message. If you want to find bugs in your code, in your website, in your app, you do it the old fashioned way: by paying for them. You buy the eyeballs.</p>\n\n<p>While I applaud any effort to make things more secure, and I completely agree that security is a battle we should be fighting on multiple fronts, both commercial and non-commercial, <strong>I am uneasy about some aspects of paying for bugs becoming the new normal.</strong> What are we incentivizing, exactly?</p>\n\n<h3>Money makes security bugs go underground</h3>\n\n<p>There&#39;s now a price associated with exploits, and the deeper the exploit and the lesser known it is, the more incentive there is to not tell anyone about it until you can collect a major payout. So you might wait up to a year to report anything, and meanwhile this security bug is out there in the wild – who knows who else might have discovered it by then?</p>\n\n<p>If your focus is the payout, who is paying more? The good guys, or the bad guys? Should you hold out longer for a bigger payday, or build the exploit up into something even larger? I hope for our sake the good guys have the deeper pockets, otherwise we are all screwed.</p>\n\n<p>I like that Google <a href=\"http://blog.chromium.org/2015/02/pwnium-v-never-ending-pwnium.html\">addressed a few of these concerns</a> by making Pwnium, their Chrome specific variant of Pwn2Own, a) no longer a yearly event but all day, every day and b) increasing the prize money to \"infinite\". I don't know if that's enough, but it's certainly going in the right direction.</p>\n\n<h3>Money turns security into a \"me\" goal instead of an \"us\" goal</h3>\n\n<p>I first noticed this trend when one or two people reported minor security bugs in Discourse, and then seemed to hold out their hand, expectantly. (At least, as much as you can do something like that in email.) It felt really odd, and it made me uncomfortable.</p>\n\n<p>Am I now obligated, on top of providing a completely free open source project to the world, to pay people for contributing information about security bugs that make this open source project better? Believe me, I was very appreciative of the security bug reporting, and I sent them whatever I could, stickers, t-shirts, effusive thank you emails, callouts in the code and checkins. But open source isn&#39;t supposed to be about the money… is it?</p>\n\n<p>Perhaps the landscape is different for closed-source, commercial products, where there's no expectation of quid pro quo, and everybody already pays for the service directly or indirectly anyway.</p>\n\n<h3>No Money? No Security.</h3>\n\n<p>If all the best security researchers are working on ever larger bug bounties, and every major company adopts these sorts of bug bounty programs, what does that do to the software industry? </p>\n\n<p>It implies that unless you have a big budget, you can't expect to have great security, because nobody will want to report security bugs to you. Why would they? They won't get a payday. They'll be looking elsewhere.</p>\n\n<p>A ransomware culture of \"pay me or I won't tell you about your terrible security bug\" does not feel very far off, either. We've had mails like that already.</p>\n\n<h3>Easy money attracts all skill levels</h3>\n\n<p>One unfortunate side effect of this bug bounty trend is that it attracts not just bona fide programmers interested in security, but anyone interested in <em>easy money</em>.</p>\n\n<p>We&#39;ve gotten too many &quot;serious&quot; security bug reports that were extremely low value. And we have to follow up on these, because they are &quot;serious&quot;, right? Unfortunately, many of them are a waste of time, because …</p>\n\n<ul>\n<li><p>The submitter is more interested in scaring you about the massive, critical security implications of this bug than actually providing a decent explanation of the bug, so you'll end up doing all the work.</p></li>\n<li><p>The submitter doesn't understand what is and isn't an exploit, but knows there is value in anything <em>resembling</em> an exploit, so submits everything they can find.</p></li>\n<li><p>The submitter can't share notes with other security researchers to verify that the bug is indeed an exploit, because they might \"steal\" their exploit and get paid for it before they do.</p></li>\n<li><p>The submitter needs to convince you that this is an exploit in order to get paid, so they will argue with you about this. At length.</p></li>\n</ul>\n\n<p>The incentives feel really wrong to me. As much as I know security is incredibly important, I view these interactions with an increasing sense of dread because they generate work for me and the returns are low.</p>\n\n<h3>What can we do?</h3>\n\n<p>Fortunately, we all have the same goal: <strong>make software more secure</strong>.</p>\n\n<p>So we should view bug bounty programs as an additional angle of attack, another aspect of \"defense in depth\", perhaps optimized a bit more for commercial projects where there is ample money. And that's OK.</p>\n\n<p>But I have some advice for bug bounty programs, too:</p>\n\n<ul>\n<li><p>You should have someone vetting these bug reports, and making sure they are credible, have clear reproduction steps, and are repeatable, before we ever see them.</p></li>\n<li><p>You should build additional incentives in your community for some kind of collaborative work towards bigger, better exploits. These researchers need to be working together in public, not in secret against each other.</p></li>\n<li><p>You should have a reputation system that builds up so that only the better, proven contributors are making it through and submitting reports.</p></li>\n<li><p>Encourage larger orgs to fund bug bounties for common open source projects, not just their own closed source apps and websites. At Stack Exchange, we donated to open source projects we used every year. Donating a bug bounty could be a big bump in eyeballs on that code.</p></li>\n</ul>\n\n<p>I am concerned that we may be slowly moving toward a world where <strong>given enough money, all bugs are shallow</strong>. Money does introduce some perverse incentives for software security, and those incentives should be watched closely.</p>\n\n<p>But I still believe that the people who will freely report security bugs in open source software because</p>\n\n<ul>\n<li>It is the right thing to do™</li>\n</ul>\n\n<p>and</p>\n\n<ul>\n<li>They want to contribute back to open source projects that have helped them, and the world</li>\n</ul>\n\n<p>… will hopefully not be going away any time soon.</p>\n\n<table>  \n<tr><td>  \n[advertisement] How are you showing off your awesome? Create a <a href=\"http://careers.stackoverflow.com/cv\" rel=\"nofollow\">Stack Overflow Careers profile</a> and show off all of your hard work from Stack Overflow, Github, and virtually every other coding site. Who knows, you might even get recruited for a great <a href=\"http://careers.stackoverflow.com/jobs\" rel=\"nofollow\">new position</a>!\n</td></tr>  \n</table>",
					"categories":[]
				},
				{
					"title":"Toward a Better Markdown Tutorial",
					"link":"http://blog.codinghorror.com/toward-a-better-markdown-tutorial/",
					"author":"Jeff Atwood",
					"publishedDate":"Fri, 27 Mar 2015 17:19:48 -0700",
					"contentSnippet":"It's always surprised me when people, especially technical people, say they don't know Markdown. Do you not use GitHub? Stack ...",
					"content":"<p>It's always surprised me when people, especially technical people, say they don't know <a href=\"http://en.wikipedia.org/wiki/Markdown\">Markdown</a>. Do you not use GitHub? Stack Overflow? Reddit?</p>\n\n<p>I get that an average person may not understand how Markdown is based on simple old-school plaintext ASCII typing conventions. Like when you're *really* excited about something, you naturally put asterisks around it, and Markdown makes that automagically italic.</p>\n\n<p>But how can we expect them to know that, if they grew up with wizzy-wig editors where the only way to make italic is to click a toolbar button, like an animal?</p>\n\n<p><img src=\"http://blog.codinghorror.com/content/images/2015/03/classic-wysiwyg-toolbar.png\" alt=\"\"></p>\n\n<p>I am not advocating for WYSIWYG here. While there's certainly more than one way to make italic, I personally <a href=\"http://blog.codinghorror.com/invisible-formatting-tags-are-evil/\">don't like invisible formatting tags</a> and I find that WYSIWYG is more like <a href=\"http://blog.codinghorror.com/what-you-cant-see-you-cant-get/\">WYCSYCG</a> in practice. It's dangerous to be dependent on these invisible formatting codes you can't control. And they're especially bad if you ever plan to care about differences, revisions, and edit history. That's why I like to teach people simple, <em>visible</em> formatting codes.</p>\n\n<p>We can certainly debate <a href=\"http://blog.codinghorror.com/is-html-a-humane-markup-language/\">which markup language is superior</a>, but in Discourse we tried to build a rainbow tool that satisifies everyone. We support:</p>\n\n<ul>\n<li>HTML (safe subset)</li>\n<li>BBCode (basic subset)</li>\n<li>Markdown (full)</li>\n</ul>\n\n<p>This makes coding our editor kind of hellishly complex, but it means that for you, the user, whatever markup language you're used to will probably \"just work\" on any Discourse site you happen to encounter in the future. But BBCode and HTML are supported mostly as bridges. What we view as our primary markup format, and what we want people to learn to use, is Markdown.</p>\n\n<p>However, one thing I have really struggled with is that <strong>there isn't any single great place to refer people to with a simple walkthrough and explanation of Markdown.</strong></p>\n\n<p>When we built Stack Overflow circa 2008-2009, I put together my best effort at the time which became <a href=\"http://www.stackoverflow.com/editing-help\">the \"editing help\" page</a>:</p>\n\n<p><img src=\"http://blog.codinghorror.com/content/images/2015/03/markdown-help.png\" alt=\"\"></p>\n\n<p>It's just OK. And GitHub has their <a href=\"https://help.github.com/articles/markdown-basics/\">Markdown Basics</a>, and <a href=\"https://help.github.com/articles/github-flavored-markdown/\">GitHub Flavored Markdown</a> help pages. They're OK. </p>\n\n<p>The <a href=\"https://ghost.org/\">Ghost</a> editor I am typing this in has an OK Markdown help page too.</p>\n\n<p><img src=\"http://blog.codinghorror.com/content/images/2015/03/ghost-markdown-help.png\" alt=\"\"></p>\n\n<p>But none of these are <em>great</em>.</p>\n\n<p><strong>What we really need is a <em>great</em> Markdown tutorial and reference page</strong>, one that we can refer anyone to, anywhere in the world, from someone who barely touches computers to the hardest of hard-core coders. I don't want to build another one for these kinds of help pages for Discourse, I want to build one for everyone. Since it is for everyone, I want to involve everyone. And by everyone, I mean you. </p>\n\n<p>After writing about <a href=\"http://blog.codinghorror.com/our-programs-are-fun-to-use/\">Our Programs Are Fun To Use</a> – which I just updated with a bunch of great examples contributed in the comments, so go check that out even if you read it already – I am inspired by the idea that <strong>we can make a fun, <em>interactive</em> Markdown tutorial together.</strong></p>\n\n<p>So here's what I propose: <strong>a small contest</strong> to build an interactive Markdown tutorial and reference, which we will eventually host at the home page of <a href=\"http://commonmark.org/\">commonmark.org</a>, and can be freely mirrored anywhere in the world.</p>\n\n<p>Some ground rules:</p>\n\n<ul>\n<li><p>It should be <em>primarily</em> in JavaScript and HTML. Ideally entirely so. If you need to use a server-side scripting language, that's fine, but try to keep it simple, and make sure it's something that is reasonable to deploy on a generic Linux server anywhere.</p></li>\n<li><p>You can pick any approach you want, but it should be <a href=\"http://blog.codinghorror.com/our-programs-are-fun-to-use/\">highly interactive</a>, and I suggest that you at minimum provide two tracks:</p>\n\n<ul><li><p>A gentle, interactive tutorial for absolute beginners who are asking \"what the heck does Markdown even mean?\"</p></li>\n<li><p>A dynamic, interactive reference for intermediates and experts who are asking more advanced usage questions, like \"how do I make code inside a list, or a list inside a list?\"</p></li></ul></li>\n<li><p>There's a lot of variance in Markdown implementations, so teach the most common parts of Markdown, and cover the optional / less common variations either in the advanced reference areas or in extra bonus sections. People do love their tables and footnotes! We recommend using a <a href=\"http://talk.commonmark.org/c/implementation\">CommonMark compatible implementation</a>, but it is not a requirement.</p></li>\n<li><p>Your code must be MIT licensed. </p></li>\n<li><p>Judging will be completely at the whim of myself and John MacFarlane. Our decisions will be capricious, arbitrary, probably nonsensical, and above all, final.</p></li>\n<li><p>We'll run this contest for a period of one month, from today until April 28th, 2015.</p></li>\n<li><p>If I have hastily left out any clarifying rules I should have had, they will go here.</p></li>\n</ul>\n\n<p>Of course, the real reward for building is the admiration of your peers, and the knowledge that an entire generation of people will grow up learning basic Markdown skills through your contribution to a global open source project.</p>\n\n<p>But on top of that, I am offering … <em>fabulous prizes!</em></p>\n\n<ol>\n<li><p>Let's start with my <a href=\"http://blog.codinghorror.com/recommended-reading-for-developers/\">Recommended Reading List</a>. I count sixteen books on it. As long as you live in a place Amazon can ship to, I'll send you all the books on that list. (Or the equivalent value in an Amazon gift certificate, if you happen to have a lot of these books already, or prefer that.)</p></li>\n<li><p>Second prize is a <a href=\"http://blog.codinghorror.com/the-code-keyboard/\">CODE Keyboard</a>. This can be shipped worldwide.</p></li>\n<li><p>Third prize is <em>you're fired</em>. Just kidding. Third prize is your choice of any three books on my reading list. (Same caveats around Amazon apply.)</p></li>\n</ol>\n\n<p>Looking for a place to get started? Check out:</p>\n\n<ul>\n<li><p><a href=\"https://github.com/gjtorikian/markdowntutorial.com\">https://github.com/gjtorikian/markdowntutorial.com</a> and <a href=\"http://markdowntutorial.com/\">http://markdowntutorial.com/</a> by Garen Torikian</p></li>\n<li><p><a href=\"https://github.com/chrisalley/commonmark-website\">https://github.com/chrisalley/commonmark-website</a> and <a href=\"http://chrisalley.github.io/commonmark-website/\">http://chrisalley.github.io/commonmark-website/</a> by Chris Alley</p></li>\n</ul>\n\n<p>If you want privacy, you can mail your entries to me directly (see the about page here for my email address), or if you are comfortable with posting your contest entry in public, I'll create a topic on <a href=\"http://talk.commonmark.org\">talk.commonmark</a> for you to post links and gather feedback. Leaving your entry in the comments on this article is also OK.</p>\n\n<p>We desperately need a <em>great</em> place that we can send everyone to learn Markdown, and we need your help to build it. Let's give this a shot. Surprise and amaze us!</p>\n\n<table>  \n<tr><td>  \n[advertisement] <a href=\"http://careers.stackoverflow.com/\" rel=\"nofollow\">Stack Overflow Careers</a> matches the best developers (you!) with the best employers. You can search our <a href=\"http://careers.stackoverflow.com/jobs\" rel=\"nofollow\">job listings</a> or <a href=\"http://careers.stackoverflow.com/cv\" rel=\"nofollow\">create a profile</a> and even let employers find you.\n</td></tr>  \n</table>",
					"categories":[]
				},
				{	
					"title":"Our Programs Are Fun To Use",
					"link":"http://blog.codinghorror.com/our-programs-are-fun-to-use/",
					"author":"Jeff Atwood",
					"publishedDate":"Mon, 09 Mar 2015 03:49:39 -0700",
					"contentSnippet":"These two imaginary guys influenced me heavily as a programmer.\n\n\n\nInstead of guaranteeing fancy features or compatibility or ...",
					"content":"<p>These <a href=\"http://en.wikipedia.org/wiki/Beagle_Bros\">two imaginary guys</a> influenced me heavily as a programmer.</p>\n\n<p><a href=\"http://en.wikipedia.org/wiki/Beagle_Bros\"><img src=\"http://blog.codinghorror.com/content/images/2015/03/beagle_bros_micro_software_.png\" alt=\"\" title=\"\"></a></p>\n\n<p>Instead of guaranteeing fancy features or compatibility or error free operation, Beagle Bros software promised something else altogether: <strong>fun</strong>.</p>\n\n<p><a href=\"http://stevenf.com/beagle-collection/\"><img src=\"http://blog.codinghorror.com/content/images/2015/03/beagle-bros-statement-of-quality.png\" alt=\"\" title=\"\"></a></p>\n\n<p>Playing with the Beagle Bros quirky Apple II floppies in middle school and high school, and the smorgasboard of oddball hobbyist ephemera collected on them, was a rite of passage for me.</p>\n\n<p><a href=\"http://beagle.applearchives.com/the_graphics/beagle_bros_graphics_1/disk_warnings_10.html\"><img src=\"http://blog.codinghorror.com/content/images/2015/03/beagle-bros-disk-donts.png\" alt=\"\" title=\"\"></a></p>\n\n<p>Here were a bunch of goofballs writing terrible AppleSoft BASIC code like me, but doing it for a living – and clearly having fun in the process. Apparently, the best way to create fun programs for users is to <a href=\"http://blog.codinghorror.com/remember-this-stuff-is-supposed-to-be-fun/\">make sure you had fun writing them in the first place</a>. </p>\n\n<p>But more than that, they taught me <strong>how much more fun it was to learn by playing with an interactive, dynamic program</strong> instead of passively reading about concepts in a book.</p>\n\n<p><a href=\"https://archive.org/details/SiliconSalad\"><img src=\"http://blog.codinghorror.com/content/images/2015/03/beagle-bros-silicon-salad-menu.png\" alt=\"\" title=\"\"></a></p>\n\n<p>That experience is another reason I've <a href=\"http://blog.codinghorror.com/level-one-the-intro-stage/\">always resisted</a> calls to add \"intro videos\", external documentation, walkthroughs and so forth. </p>\n\n<p>One of the programs on these Beagle Bros floppies, and I can't for the life of me remember which one, or in what context this happened, printed the following on the screen:</p>\n\n<blockquote>\n  <p>One day, all books will be interactive and animated.</p>\n</blockquote>\n\n<p>I thought, wow. That's it. <em>That's</em> what these floppies were trying to be! Interactive, animated textbooks that taught you about programming and the Apple II! Incredible.</p>\n\n<p>This idea has been burned into my brain for twenty years, ever since I originally read it on that monochrome Apple //c screen. Imagine a world where textbooks didn't just present a wall of text to you, the learner, but actually engaged you, played with you, and invited experimentation. <em>Right there on the page.</em></p>\n\n<p>(Also, if you can find and screenshot the specific Beagle Bros program that I'm thinking of here, I'd be very grateful: there's a free <a href=\"http://blog.codinghorror.com/the-code-keyboard/\">CODE Keyboard</a> with your name on it.)</p>\n\n<p>Between the maturity of JavaScript, HTML 5, and the latest web browsers, you can deliver exactly the kind of <strong>interactive, animated textbook experience</strong> the Beagle Bros dreamed about in 1985 to billions of people with nothing more than access to the Internet and a modern web browser.</p>\n\n<p>Here are a few great examples I've collected. Screenshots don't tell the full story, so click through and experiment. </p>\n\n<ul>\n<li><p><a href=\"http://bost.ocks.org/mike/algorithms/\">Visualizing Algorithms</a> – amazing dynamic visualizations of several interesting and popular algorithms.</p></li>\n<li><p><a href=\"http://ncase.me/polygons/\">Parable of the Polygons</a> – a playable post on the shape of society.</p></li>\n<li><p><a href=\"http://ncase.me/sight-and-light/\">Sight and Light</a> – interactive explanation of 2D visibility calculations.</p></li>\n<li><p><a href=\"http://jasmcole.com/2014/10/12/rolling-shutters/\">Rolling Shutters</a> – an animated explanation of the visual glitches introduced in digital cameras by CMOS sensors when taking pictures of fast moving objects.</p></li>\n<li><p><a href=\"http://sorting.at/\">Sorting.at</a> – a live visualization of common sorting algorithms.</p></li>\n<li><p><a href=\"http://www.polygon.com/2015/3/6/8158649/games-history-workplace-theft-internet-archive\">The future of games history is workplace theft</a> – illustrates software history by embedding an emulated, fully playable version of Wolfenstein 3D right in the page.</p></li>\n</ul>\n\n<p>As suggested in the comments, and also excellent:</p>\n\n<ul>\n<li><p><a href=\"http://www.redblobgames.com/\">Red Blob Games</a> – Fun, live demonstrations of computer game algorithm mechanics.</p></li>\n<li><p><a href=\"http://flukeout.github.io/\">CSS Diner</a> – Learn about CSS by interactively playing a game.</p></li>\n<li><p><a href=\"https://scratch.mit.edu/\">MIT's Scratch</a> –  A popular visual programming language for kids.</p></li>\n<li><p><a href=\"http://eloquentjavascript.net/\">Eloquent Javascript</a> – This looks like a regular online book, but click the examples to activate a live sandbox! Type and use the little menu at the upper right (or control-enter) to run the code.</p></li>\n<li><p><a href=\"http://jackschaedler.github.io/circles-sines-signals/aliasing.html\">Interpreting Discrete Signals</a> – Nice example of a signal processing textbook with interactive graphs.</p></li>\n<li><p><a href=\"http://maxgoldste.in/melkman/\">Melkman's Algorithm</a> – Another approach at a textbook where you must interact to proceed to the next page.</p></li>\n<li><p><a href=\"https://tour.golang.org/welcome/1\">A Tour of Go</a> – Places a live console side by side with examples of each concept in the Go programming language.</p></li>\n<li><p><a href=\"http://acko.net/blog/how-to-fold-a-julia-fractal/\">How to Fold a Julia Fractal</a> – Another textbook, but this time using lots of detailed JavaScript animations that you can step through forward and back.</p></li>\n<li><p><a href=\"http://animagraffs.com/how-a-handgun-works-1911-45/\">How a Handgun Works</a> – Visual explanations using a bunch of giant, traditional GIF animations.</p></li>\n<li><p><a href=\"http://507movements.com/\">507 Mechanical Movements</a> – A 1908 primer on mechanical movements, animated for the Internet.</p></li>\n<li><p><a href=\"http://www.randalolson.com/2015/02/03/heres-waldo-computing-the-optimal-search-strategy-for-finding-waldo/\">Here’s Waldo: Computing the optimal search strategy for finding Waldo</a> – Good example of explaining a visual search algorithm in a blog post with animated GIFs and graphcs.</p></li>\n</ul>\n\n<p>(There are also native apps that do similar things; the well reviewed <a href=\"http://www.earthprimer.com/\">Earth Primer</a>, for example. But when it comes to education, I'm not too keen on platform specific apps which seem replicable in common JavaScript and HTML.)</p>\n\n<p>In the bad old days, we learned programming by reading books. But instead of reading <a href=\"http://www.amazon.com/Learning-Ruby-Michael-James-Fitzgerald/dp/0596529864?tag=codihorr-20\">this dry old text</a>:</p>\n\n<p><img src=\"http://blog.codinghorror.com/content/images/2015/03/learning-ruby-excerpt.png\" alt=\"\"></p>\n\n<p>Now we can <a href=\"http://www.codecademy.com/en/tracks/ruby\">learn the same concepts interactively</a>, by reading a bit, then experimenting with live code on the same page as the book, and watching the results as we type.</p>\n\n<p><img src=\"http://blog.codinghorror.com/content/images/2015/03/codecademy-ruby.png\" alt=\"\"></p>\n\n<p>C'mon. Type something. <a href=\"http://blog.codinghorror.com/a-scripter-at-heart/\">See what happens.</a> </p>\n\n<p>I certainly want my three children to learn from other kids and their teachers, as humans have since time began. But I also want them to have access to a better class of books than I did. Books that are effectively <em>programs</em>. Interactive, animated books that let them play and experiment and create, not just passively read. </p>\n\n<p>I want them to learn, as I did, that <strong>our programs are fun to use.</strong></p>\n\n<table>  \n<tr><td>  \n[advertisement] <a href=\"http://careers.stackoverflow.com/\" rel=\"nofollow\">Stack Overflow Careers</a> matches the best developers (you!) with the best employers. You can search our <a href=\"http://careers.stackoverflow.com/jobs\" rel=\"nofollow\">job listings</a> or <a href=\"http://careers.stackoverflow.com/cv\" rel=\"nofollow\">create a profile</a> and even let employers find you.\n</td></tr>  \n</table>",
					"categories":[]
				},
				{
					"title":"The God Login",
					"link":"http://blog.codinghorror.com/the-god-login/",
					"author":"Jeff Atwood",
					"publishedDate":"Fri, 09 Jan 2015 03:32:19 -0800",
					"contentSnippet":"I graduated with a Computer Science minor from the University of Virginia in 1992. The reason it's a minor and not a major is ...",
					"content":"<p>I graduated with a Computer Science minor from the University of Virginia in 1992. The reason it's a minor and not a major is because to major in CS at UVa you had to go through the Engineering School, and I was absolutely not cut out for that kind of hardcore math and physics, to put it mildly. The beauty of a minor was that I could cherry pick all the cool CS classes and skip everything else.</p>\n\n<p>One of my favorite classes, the one I remember the most, was Algorithms. I always told people my Algorithms class was the one part of my college education that influenced me most as a programmer. I wasn't sure exactly why, but a few years ago I had a hunch so I looked up <a href=\"http://www.cs.cmu.edu/~pausch/Randy/Randy/Vita.html\">a certain CV</a> and realized that Randy Pausch – yes, <a href=\"http://en.wikipedia.org/wiki/The_Last_Lecture\">the <em>Last Lecture</em> Randy Pausch</a> – taught that class. The timing is perfect: University of Virginia, Fall 1991, CS461 Analysis of Algorithms, 50 students.</p>\n\n<p>I was one of them.</p>\n\n\n\n<p>No wonder I was so impressed. Pausch was an incredible, charismatic teacher, a testament to the old adage that your should choose your teacher first and the class material second, if you bother to at all. It's so true.</p>\n\n<p>In this case, the combination of great teacher and great topic was extra potent, as algorithms are central to what programmers do. Not that we invent new algorithms, but we need to understand the code that's out there, grok why it tends to be fast or slow due to the tradeoffs chosen, and <a href=\"http://blog.codinghorror.com/everything-is-fast-for-small-n/\">choose the <em>correct</em> algorithms</a> for what we're doing. That's essential.</p>\n\n<p>And one of the coolest things Mr. Pausch ever taught me was to ask this question:</p>\n\n<blockquote>\n  <p>What's the God algorithm for this?</p>\n</blockquote>\n\n<p>Well, when sorting a list, obviously God wouldn't bother with a stupid Bubble Sort or Quick Sort or Shell Sort like us mere mortals, God would just immediately place the items in the correct order. Bam. One step. The <a href=\"http://bigocheatsheet.com/\">ultimate lower bound on computation</a>, O(1). Not just fixed time, either, but literally one instantaneous step, <em>because you're freakin' God</em>. </p>\n\n<p><img src=\"http://blog.codinghorror.com/content/images/2015/01/god-you-asked-for-a-sign.jpg\" alt=\"\"></p>\n\n<p>This kind of blew my mind at the time. </p>\n\n<p>I always suspected that programmers became programmers because <a href=\"http://blog.codinghorror.com/bridges-software-engineering-and-god/\">they got to play God</a> with the little universe boxes on their desks. Randy Pausch took that conceit and turned it into a really useful way of setting boundaries and asking yourself hard questions about what you're doing and why.</p>\n\n<p>So when we set out to build a login dialog for <a href=\"http://www.discourse.org\">Discourse</a>, I went back to what I learned in my Algorithms class and asked myself:</p>\n\n<blockquote>\n  <p>How would God build this login dialog?</p>\n</blockquote>\n\n<p>And the answer is, of course, <strong>God wouldn't bother to build a login dialog at all.</strong> Every user would already be logged into GodApp the second they loaded the page because God knows who they are. Authoritatively, even.</p>\n\n<p>This is obviously impossible for us, because God isn't one of our investors.</p>\n\n<p>But.. how <em>close can we get</em> to the perfect godlike login experience in Discourse? That's a noble and worthy goal.</p>\n\n<p><img src=\"http://blog.codinghorror.com/content/images/2015/01/discourse-login-dialog.png\" alt=\"\"></p>\n\n<p>Wasn't it Bill Gates who <a href=\"https://www.commandprompt.com/community/pyqt/x3581\">once asked</a> why the hell every programmer was writing the same File Open dialogs over and over? It sure feels that way for login dialogs. I've been saying for a long time that <a href=\"http://blog.codinghorror.com/cutting-the-gordian-knot-of-web-identity/\">the best login is no login at all</a> and I'm a staunch supporter of <a href=\"http://blog.codinghorror.com/your-internet-drivers-license/\">logging in with your Internet Driver's license</a> whenever possible. So we absolutely support that, if you've configured it.</p>\n\n<p><img src=\"http://blog.codinghorror.com/content/images/2015/01/common-oauth-logins.png\" alt=\"\"></p>\n\n<p>But today I want to focus on the <strong>core, basic login experience: user and password.</strong> That's the default until you configure up the other methods of login.</p>\n\n<p>A login form with two fields, two buttons, and a link on it seems simple, right? Bog standard. It is, until you consider all the ways the simple act of logging in with those two fields can go wrong for the user. Let's think.</p>\n\n<h4>Let the user enter an email to log in</h4>\n\n<p>The critical fault of OpenID, as much as <a href=\"http://blog.codinghorror.com/openid-does-the-world-really-need-yet-another-username-and-password/\">I liked it</a> as an early login solution, was its assumption that users could accept an URL as their \"identity\". This is flat out crazy, and in the long run this central flawed assumption in OpenID broke it as a future standard. </p>\n\n<p><strong>User identity is always email, plain and simple</strong>. What happens when you forget your password? You get an email, right? Thus, email is your identity. Some people even propose <a href=\"http://notes.xoxco.com/post/27999787765/is-it-time-for-password-less-login\">using email as the only login method</a>.</p>\n\n<p><img src=\"http://blog.codinghorror.com/content/images/2015/01/discourse-log-in-email.png\" alt=\"\"></p>\n\n<p>It's fine to have a username, of course, but <em>always</em> let users log in with either their username or their email address. Because I can tell you with 100% certainty that when those users forget their password, and they will, all the time, they'll need that email anyway to get a password reset. Email and password are strongly related concepts and they belong together. Always!</p>\n\n<p>(And a fie upon services that don't allow me to use my email as a username or login.  I'm looking at you, Comixology.)</p>\n\n<h4>Tell the user when their email doesn't exist</h4>\n\n<p>OK, so we know that email is de-facto identity for most people, and this is a logical and necessary state of affairs. But <em>which</em> of my 10 email addresses did I use to log into your site? </p>\n\n<p>This was the source of a <a href=\"https://meta.discourse.org/t/different-password-reset-for-wrong-username-email/15909\">long discussion at Discourse</a> about whether it made sense to reveal to the user, when they enter an email address in the \"forgot password\" form, whether we have that email address on file. On many websites, here's the sort of message you'll see after entering an email address in the forgot password form:</p>\n\n<blockquote>\n  <p>If an account matches name@example.com, you should receive an email with instructions on how to reset your password shortly.</p>\n</blockquote>\n\n<p>Note the coy \"if\" there, which is a <a href=\"http://www.troyhunt.com/2012/05/everything-you-ever-wanted-to-know.html\">hedge against all the security implications of revealing whether a given email address exists on the site</a> just by typing it into the forgot password form. </p>\n\n<p>We're deadly serious about picking safe defaults for Discourse, so out of the box you won't get exploited or abused or overrun with spammers.  But after experiencing the real world \"which email did we use here again?\" login state on dozens of Discourse instances ourselves, we realized that, in this specific case, being user friendly is <em>way</em> more important than being secure.</p>\n\n<p><img src=\"http://blog.codinghorror.com/content/images/2015/01/forgot-password.png\" alt=\"\"></p>\n\n<p>The new default is to let people know when they've entered an email we don't recognize in the forgot password form. This will save their sanity, and yours. You can turn on the extra security of being coy about this, if you need it, via a site setting.</p>\n\n<h4>Let the user switch between Log In and Sign Up any time</h4>\n\n<p>Many websites have started to show login and signup buttons side by side. This perplexed me; aren't the acts of logging in and signing up very different things? </p>\n\n<p>Well, from the user's perspective, they don't appear to be. This Verge login dialog illustrates just how close the sign up and log in forms really are. Check out this animated GIF of it in action.</p>\n\n<p><img src=\"http://blog.codinghorror.com/content/images/2015/01/login-vs-sign-up.gif\" alt=\"\"></p>\n\n<p>We've acknowledged that similarity by having either form accessible at any time from the two buttons at the bottom of the form, as a toggle:</p>\n\n<p><img src=\"http://blog.codinghorror.com/content/images/2015/01/login-vs-create-new-account.png\" alt=\"\"></p>\n\n<p>And both can be kicked off directly from any page via the Sign Up and Log In buttons at the top right:</p>\n\n<p><img src=\"http://blog.codinghorror.com/content/images/2015/01/sign-up-vs-log-in-discourse.png\" alt=\"\"></p>\n\n<h4>Pick common words</h4>\n\n<p>That's the problem with language, we have so many <em>words</em> for these concepts:</p>\n\n<ul>\n<li>Sign In</li>\n<li>Log In</li>\n<li>Sign Up</li>\n<li>Register</li>\n<li>Join &lt;site&gt;</li>\n<li>Create Account</li>\n<li>Get Started</li>\n<li>Subscribe</li>\n</ul>\n\n<p>Which are the \"right\" ones? <a href=\"http://ux.stackexchange.com/questions/1080/using-sign-in-vs-using-log-in\">User research data isn't conclusive</a>.</p>\n\n<p>I tend to favor the shorter versions when possible, mostly because I'm a fan of the whole brevity thing, but there are valid <a href=\"http://uxmovement.com/buttons/why-sign-up-and-sign-in-button-labels-confuse-users/\">cases to be made</a> for each depending on the circumstances and user preferences.</p>\n\n<p><img src=\"http://blog.codinghorror.com/content/images/2015/01/bad-okay-good-login-buttons.png\" alt=\"\"></p>\n\n<p>Sign In may be slightly more common, though Log In has some <a href=\"http://www.designcult.org/2011/08/why-do-we-call-in-logging-in.html\">nautical and historical computing basis</a> that makes it worthy:</p>\n\n<blockquote>\n  <p>A couple of years ago I did a survey of top websites in the US and UK and whether they used “sign in”, “log in”, “login”, “log on”, or some other variant. The answer at the time seemed to be that if you combined “log in” and “login”, it exceeded “sign in”, but not by much. I’ve also noticed that the trend toward “sign in” is increasing, especially with the most popular services. Facebook seems to be a “log in” hold-out. </p>\n  \n  <p><img src=\"http://blog.codinghorror.com/content/images/2015/01/log-in-vs-sign-in-graph.png\" alt=\"\" title=\"\"></p>\n</blockquote>\n\n<h4>Work with browser password managers</h4>\n\n<p>Every login dialog you create should be tested to work with the default password managers in …</p>\n\n<ul>\n<li><a href=\"http://windows.microsoft.com/en-us/internet-explorer/fill-in-forms-remember-passwords-autocomplete#ie=ie-11\">Internet Explorer</a></li>\n<li><a href=\"https://support.google.com/chrome/answer/95606?hl=en\">Chrome</a></li>\n<li><a href=\"https://support.mozilla.org/en-US/kb/password-manager-remember-delete-change-passwords\">Firefox</a></li>\n<li><a href=\"http://support.apple.com/en-us/HT204085\">Safari</a></li>\n</ul>\n\n<p>At an absolute minimum. Upon subsequent logins in that browser, you should see the username and password automatically autofilled.</p>\n\n<p><img src=\"http://blog.codinghorror.com/content/images/2015/01/log-in-autofill.png\" alt=\"\"></p>\n\n<p>Users rely on these default password managers built into the browsers they use, and any proper modern login form should respect that, and be designed sensibly, e.g. the password field should have <code>type=\"password\"</code> in the HTML and a name that's readily identifable as a password entry field.</p>\n\n<p>There's also <a href=\"https://lastpass.com/\">LastPass</a> and so forth, but I generally assume if the login dialog works with the built in browser password managers, it will work with third party utilities, too.</p>\n\n<h4>Handle common user mistakes</h4>\n\n<p>Oops, the user is typing their password with caps lock on? You should let them know about that.</p>\n\n<p><img src=\"http://blog.codinghorror.com/content/images/2015/01/password-entry-caps-lock-is-on.png\" alt=\"\"></p>\n\n<p>Oops, the user entered their email as name@gmal.com instead of name@gmail.com? Or name@hotmail.cm instead of name@hotmail.com? You should either fix typos in common email domains for them, or let them know about that.</p>\n\n<p>(I'm also a big fan of  <a href=\"http://answers.microsoft.com/en-us/ie/wiki/ie11-iewindows8_1/the-use-of-the-password-reveal-eye-button-in/19a9dee2-fb0c-4c26-a6bc-ac02cf98d80e\">native browser \"reveal password\" support</a> for the password field, so the user can verify that she typed in or autofilled the password she expects. Only Internet Explorer and I <em>think</em> Safari offer this, but all browsers should.)</p>\n\n<h4>Help users choose better passwords</h4>\n\n<p>There are many schools of thought on <s>forcing</s> helping users choose passwords that aren't unspeakably awful, e.g. <a href=\"http://blog.codinghorror.com/dictionary-attacks-101/\">password123 and iloveyou and so on</a>. </p>\n\n<p>There's the common password strength meter, which updates in real time as you type in the password field.</p>\n\n<p><img src=\"http://blog.codinghorror.com/content/images/2015/01/dropbox-password-strength-meters.png\" alt=\"\"></p>\n\n<p>It's clever idea, but it gets awful preachy for my tastes on some sites. The implementation also leaves a lot to be desired, as it's left up to the whims of the site owner to decide what password strength means. One site's \"good\" is another site's \"get outta here with that Fisher-Price toy password\". It's frustrating.</p>\n\n<p>So, with Discourse, rather than all that, I decided we'd default on a solid absolute minimum password length of 8 characters, and then verify the password to make sure it is not one of the <a href=\"http://thepasswordproject.com/\">10,000 most common known passwords</a> by checking its hash.</p>\n\n<p><img src=\"http://blog.codinghorror.com/content/images/2015/01/create-new-account-password-too-common.png\" alt=\"\"></p>\n\n<h4>Don't forget the keyboard</h4>\n\n<p>I feel like keyboard users are a dying breed at this point, but for those of us that, when presented with a login dialog, like to rapidly type</p>\n\n<p><kbd>name@example.com</kbd>, <kbd>tab</kbd>, <kbd>p4$$w0rd</kbd>, <kbd>enter</kbd></p>\n\n<p>… <em>please</em> verify that this works as it should. Tab order, enter to submit, etcetera.</p>\n\n<h4>Rate limit all the things</h4>\n\n<p>You should be <a href=\"http://blog.codinghorror.com/rate-limiting-and-velocity-checking/\">rate limiting everything users can do, everywhere</a>, and that's especially true of the login dialog.</p>\n\n<p>If someone forgets their password and makes 3 attempts to log in, or issues 3 forgot password requests, that&#39;s probably OK. But if someone makes a thousand attempts to log in, or issues a thousand forgot password requests, that&#39;s a little weird. Why, I might even venture to guess they&#39;re possibly … <em>not human</em>.</p>\n\n<p><img src=\"http://blog.codinghorror.com/content/images/2015/01/too-many-failed-log-in-attempts.png\" alt=\"\"></p>\n\n<p>You can do fancy stuff like temporarily disable accounts or start showing a CAPTCHA if there are too many failed login attempts, but this can easily become a griefing vector, so be careful.</p>\n\n<p>I think a nice middle ground is to insert standard pauses of moderately increasing size after repeated sequential failures or repeated sequential forgot password requests from the same IP address. So that's what we do.</p>\n\n<h4>Stuff I forgot</h4>\n\n<p>I tried to remember everything we went through when we were building our ideal login dialog for Discourse, but I'm sure I forgot something, or could have been more thorough. Remember, <a href=\"https://github.com/discourse/discourse\">Discourse is 100% open source</a> and by definition a work in progress – so as my friend <a href=\"http://tirania.org/blog/\">Miguel de Icaza</a> likes to say, when it breaks, you get to keep both halves. Feel free to test out our implementation and give us your feedback in the comments, or point to other examples of great login experiences, or cite other helpful advice.</p>\n\n<p>Logging in involves a simple form with two fields, a link, and two buttons. And yet, after reading all this, I'm sure you'll agree that it's deceptively complex. Your best course of action is not to build a login dialog at all, but instead rely on authentication from an outside source whenever you can.</p>\n\n<p>Like, say, God.</p>\n\n<table>  \n<tr><td>  \n[advertisement] How are you showing off your awesome? Create a <a href=\"http://careers.stackoverflow.com/cv\" rel=\"nofollow\">Stack Overflow Careers profile</a> and show off all of your hard work from Stack Overflow, Github, and virtually every other coding site. Who knows, you might even get recruited for a great <a href=\"http://careers.stackoverflow.com/jobs\" rel=\"nofollow\">new position</a>!\n</td></tr>  \n</table>",
					"categories":[]
				},
				{
					"title":"The Evolution of eInk",
					"link":"http://blog.codinghorror.com/the-evolution-of-eink/",
					"author":"Jeff Atwood",
					"publishedDate":"Mon, 15 Dec 2014 00:40:49 -0800",
					"contentSnippet":"Sure, smartphones and tablets get all the press, and deservedly so. But if you place the original mainstream eInk device from ...",
					"content":"<p>Sure, smartphones and tablets get all the press, and deservedly so. But if you place the original mainstream eInk device from 2007, the <a href=\"http://en.wikipedia.org/wiki/Amazon_Kindle#First_generation\">Amazon Kindle</a>, side by side with today's model, the evolution of eInk devices is just as striking.</p>\n\n<p><a href=\"http://www.amazon.com/dp/B00IOY8XWQ?tag=codihorr-20\"><img src=\"http://blog.codinghorror.com/content/images/2014/12/kindle-2007-vs-kindle-2014.jpg\" alt=\"\" title=\"\"></a></p>\n\n<p>Each of these devices has a 6 inch eInk screen. Beyond that they're worlds apart. </p>\n\n<table width=\"500px\" cellpadding=\"4\" cellspacing=\"4\">\n\n<tr>  \n<td valign=\"top\">  \n8&quot; × 5.3&quot; × 0.8&quot;<br>  \n10.2 oz  \n</td>  \n<td valign=\"top\">  \n6.4&quot; × 4.5&quot; × 0.3&quot;<br>  \n6.3 oz  \n</td>  \n</tr>\n\n\n<tr>  \n<td valign=\"top\">6\" eInk display<br>167 PPI<br>4 level greyscale</td>  \n<td valign=\"top\">6\" eInk display<br>300 PPI<br>16 level greyscale<br>  \nbacklight</td>  \n</tr>\n\n<tr>  \n<td valign=\"top\">256 MB</td>  \n<td valign=\"top\">4 GB</td>  \n</tr>\n\n<tr>  \n<td valign=\"top\">400 Mhz CPU</td>  \n<td valign=\"top\">1 GHz CPU</td>  \n</tr>\n\n<tr>  \n<td valign=\"top\">$399</td>  \n<td valign=\"top\">$199</td>  \n</tr>\n\n<tr>  \n<td valign=\"top\">7 days battery life<br>USB</td>  \n<td valign=\"top\">6 weeks battery life<br>  \nWiFi / Cellular  \n</td>  \n</tr>\n\n</table>\n\n<p>They may seem awfully primitive compared to smartphones, but that&#39;s part of their charm – they are <a href=\"http://blog.codinghorror.com/geek-transportation-systems/\">the scooter</a> to the motorcycle of the smartphone. Nowhere near as versatile, but as a form of basic transportation, radically simpler, radically cheaper, and more durable. There's an object lesson here in stripping things away to get to the core. </p>\n\n<p>eInk devices are also pleasant in a paradoxical way because <strong>they basically suck at everything that isn't reading</strong>. That doesn't sound like something you'd want, except when you notice you spend every fifth page switching back to Twitter or Facebook or Tinder or Snapchat or whatever. eInk devices let you tune out the world and truly immerse yourself in <em>reading</em>.</p>\n\n<p><a href=\"http://www.ashersarlin.com/archives/2011/11/post_1.php\"><img src=\"http://blog.codinghorror.com/content/images/2014/12/internetvsresearch.png\" alt=\"\" title=\"\"></a></p>\n\n<p>I believe in the broadest sense, <a href=\"http://blog.codinghorror.com/books-bits-vs-atoms/\">bits &gt; atoms</a>. Sure, we'll always read on <em>whatever</em> device we happen to hold in our hands that can display words and paragraphs. And the advent of retina class devices sure made reading a heck of a lot more pleasant on tablets and smartphones.</p>\n\n<p>But this idea of ultra-cheap, pervasive eInk reading devices eventually replacing those ultra-cheap, pervasive paperbacks I used to devour as a kid has great appeal to me. I can't let it go. <a href=\"http://blog.codinghorror.com/because-reading-is-fundamental-2/\">Reading is Fundamental</a>, man!</p>\n\n<p><img src=\"http://blog.codinghorror.com/content/images/2014/12/paperback-vs-eink.jpg\" alt=\"\"></p>\n\n<p>That's why I'm in this weird place where I will buy, sight unseen, every new Kindle eInk device. I wasn't quite crazy enough to buy the <em>original</em> Kindle (I mean, look at that thing) but I've owned every model since the third generation Kindle was introduced in 2010.</p>\n\n<p>I&#39;ve also been tracking the Kindle prices to see when they can get them down to $49 or lower. We&#39;re not quite there yet – the <a href=\"http://www.amazon.com/dp/B00I15SB16?tag=codihorr-20\">basic Kindle eInk reader</a>, which by the way is still pretty darn amazing compared to that original 2007 model pictured above – is currently on sale for $59. </p>\n\n<p>But this is mostly about their new flagship eInk device, the <a href=\"http://www.amazon.com/dp/B00IOY8XWQ?tag=codihorr-20\">Kindle Voyage</a>. Instead of being cheap, it's trying to be upscale. The absolute first thing you need to know is <strong>this is the first 300 PPI (aka \"retina\") eInk reader from Amazon</strong>. If you're familiar with the smartphone world before and after the iPhone 4, then you should already be lining up to own one of these. </p>\n\n<p>When you experience 300 PPI in eInk, you really feel like you're looking at a high quality printed page rather than an array of RGB pixels. Yeah, it's still grayscale, but it is glorious. Here are some uncompressed <a href=\"http://goodereader.com/blog/electronic-readers/how-to-take-screenshots-on-the-kindle-paperwhite\">screenshots</a> I made from mine at native resolution.</p>\n\n<p><img src=\"http://blog.codinghorror.com/content/images/2014/12/kindle-voyage-screenshot-2.png\" alt=\"\"></p>\n\n<p><img src=\"http://blog.codinghorror.com/content/images/2014/12/kindle-voyage-screenshot-3.png\" alt=\"\"></p>\n\n<p>Note that the real device is eInk, so there's a natural paper-like fuzziness that makes it seem even more high resolution than these raw bitmaps would indicate.</p>\n\n<p><img src=\"http://blog.codinghorror.com/content/images/2014/12/einkvsLCD-1.jpg\" alt=\"\"></p>\n\n<p>I <em>finally</em> have enough resolution to pick a thinner font than fat, sassy old <a href=\"http://www.myfonts.com/fonts/linotype/pmn-caecilia/\">Caecilia</a>.</p>\n\n<p>The backlight was new to the original Paperwhite, and it definitely had some teething pains. The third time&#39;s the charm; they&#39;ve nailed the backlight aspect for improved overall contrast and night reading. The Voyage also adds an ambient light sensor so it automatically scales the backlight to anything from bright outdoors to a pitch-dark bedroom. It&#39;s like automatic night time headlights on a car – one less manual setting I have to deal with before I sit down and get to my reading. It&#39;s nice.</p>\n\n<p>The Voyage also adds page turn buttons back into the mix, via pressure sensing zones on the left and right bezel. I&#39;ll admit I had some difficulty adjusting to these buttons, to the point that I wasn&#39;t sure I would, but I eventually did – and now I&#39;m a convert. Not having to move your finger into the visible text on the page to advance, and being able to advance without moving your finger <em>at all</em>, just pushing it down slightly (which provides a little haptic buzz as a reward), does make for a more pleasant and efficient reading experience. But it is kind of subtle and it took me a fair number of page turns to get it down.</p>\n\n<p><a href=\"http://www.amazon.com/dp/B00KD7ZRJ4?tag=codihorr-20\"><img src=\"http://blog.codinghorror.com/content/images/2014/12/kindle-voyage-case.jpg\" alt=\"\" title=\"\"></a></p>\n\n<p>In my experience eInk devices are a bit more fragile than tablets and smartphones. So you'll want a case for automatic on/off and basic \"throw it in my bag however\" paperback book level protection. Unfortunately, the official Kindle Voyage case is a disaster. Don't buy it.</p>\n\n<p>Previous Kindle cases were expensive, but they were actually very well designed. The Voyage case is expensive and just plain <em>bad</em>. Whoever came up with the idea of a weirdly foldable, floppy origami top opening case on a thing you expect to work like a typical <em>side-opening book</em> should be fired. I recommend something like <a href=\"http://www.amazon.com/dp/B00KD7ZRJ4?tag=codihorr-20\">this basic $14.99 case</a> which works fine to trigger on/off and opens in the expected way.</p>\n\n<p>It's not all sweetness and light, though. The <a href=\"http://www.lunascafe.org/2011/04/typography-is-about-reading-and-so-are.html\">typography issues that have plagued the Kindle</a> are still present in full force. It doesn't personally bother me that much, but it is reasonable to expect more by now from a big company that ostensibly cares about reading. And has a giant budget with lots of smart people on its payroll.</p>\n\n<blockquote lang=\"en\"><p>This is what text\nlooks like on\na kindle.</p>— Justin Van Slembrou… (@jvanslem) <a href=\"https://twitter.com/jvanslem/status/431488285613891584\">February 6, 2014</a></blockquote>  \n\n\n\n<p>If you've dabbled in the world of eInk, or you were just waiting for a best of breed device to jump in, the <a href=\"http://www.amazon.com/dp/B00IOY8XWQ?tag=codihorr-20\">Kindle Voyage is easy to recommend</a>. It's probably peak mainstream eInk. Would recommend, would buy again, will probably buy all future eInk models because I have an addiction. A reading addiction. Reading is fundamental. Oh, hey, $2.99 Kindle editions of <a href=\"http://www.amazon.com/dp/1451642598?tag=codihorr-20\">The Rise and Fall of the Third Reich?</a> Yes, please. </p>\n\n<p>(At the risk of coming across as a total Amazon shill, I'll also mention that the new <a href=\"http://www.mcelhearn.com/how-to-set-up-kindle-family-library/\">Amazon Family Sharing program</a> is amazing and lets me and my wife <em>finally</em> share books made of bits in a sane way, the way we used to share regular books: by throwing them at each other in anger.)</p>\n\n<table>  \n<tr><td>  \n[advertisement] What's your next career move? <a href=\"http://careers.stackoverflow.com/\" rel=\"nofollow\">Stack Overflow Careers</a> has the best job listings from great companies, whether you're looking for opportunities at a startup or Fortune 500. You can search our <a href=\"http://careers.stackoverflow.com/jobs\" rel=\"nofollow\">job listings</a> or <a href=\"http://careers.stackoverflow.com/cv\" rel=\"nofollow\">create a profile</a> and let employers find you.\n</td></tr>  \n</table>",
					"categories":[]
				},
				{
					"title":"Because Reading is Fundamental",
					"link":"http://blog.codinghorror.com/because-reading-is-fundamental-2/",
					"author":"Jeff Atwood",
					"publishedDate":"Tue, 25 Nov 2014 17:21:51 -0800",
					"contentSnippet":"Most discussions show a bit of information next to each user:\n\n\n\nWhat message does this send?\n\n\nThe only number you can control ...",
					"content":"<p>Most discussions show a bit of information next to each user:</p>\n\n<p><img src=\"http://blog.codinghorror.com/content/images/2014/11/forum-user-info-1.png\" alt=\"\"></p>\n\n<p>What message does this send?</p>\n\n<ul>\n<li>The only number you can control printed next to your name is post count.</li>\n<li>Everyone who reads this will see your current post count.</li>\n<li>The more you post, the bigger that number next to your name gets.</li>\n</ul>\n\n<p>If I have learned anything from the Internet, it is this: <a href=\"http://blog.codinghorror.com/for-a-bit-of-colored-ribbon/\">be very, <em>very</em> careful when you put a number next to someone's name</a>. Because <strong>people will do whatever it takes to make that number go up</strong>.</p>\n\n<p>If you don't think deeply about exactly <em>what</em> you're encouraging, <em>why</em> you're encouraging it, and all the things that may happen as a result of that encouragement, you may end up with … something darker. <a href=\"https://web.archive.org/web/20071102022046/http://benbrown.com/says/2007/10/29/i-love-my-chicken-wire-mommy\">A lot darker</a>.</p>\n\n<p>Printing a post count number next to every user's name implies that the more you post, the better things are. The more you talk, the better the conversations become. Is this the right message to send to everyone in a discussion? More fundamentally, <em>is this even true?</em></p>\n\n<p>I find that the value of conversations has little to do with how much people are talking. I find that too much talking has a <em>negative</em> effect on conversations. Nobody has time to listen to the resulting massive stream of conversation, they end up just waiting for their turn to pile on and talk, too. <strong>The best conversations are with people who spend most of their time listening</strong>. The number of times you've posted in a given topic is not a leaderboard; it's a record of failing to communicate.</p>\n\n<p>Consider the difference between a chat room and a discussion. Chat is a never-ending flow of disconnected, stream of consciousness sentences that you can occasionally dip your toes in to get the temperature of the water, and that's about it. Discussion is the process of lobbing paragraphs back and forth that results in an evolution of positions as your mutual understanding becomes more nuanced. We hope.</p>\n\n<h5>The Ars Banana Experiment</h5>\n\n<p>Ars Technica ran a little experiment in 2011. When they posted <a href=\"http://arstechnica.com/science/2011/04/guns-in-the-home-lots-of-risk-ambiguity/\">Guns at home more likely to be used stupidly than in self defense</a>, embedded in the last sentence of the seventh paragraph of the article was this text:</p>\n\n<blockquote>\n  <p>If you have read this far, please mention Bananas in your comment below. We're pretty sure 90% of the respondants to this story won't even read it first.</p>\n</blockquote>\n\n<p>The first person to do this is on page 3 of the resulting discussion, <a href=\"http://arstechnica.com/science/2011/04/guns-in-the-home-lots-of-risk-ambiguity/?comments=1&amp;post=21585045#comment-21585045\">comment number 93</a>. Or as helpfully visualized by <a href=\"http://thoughtcatalog.com/brandon-gorrell/2011/04/the-problem-with-having-a-serious-discussion-on-the-internet/\">Brandon Gorrell</a>:</p>\n\n<p><img src=\"http://blog.codinghorror.com/content/images/2014/11/ars-banana-experiment-graphic.jpg\" alt=\"\"></p>\n\n<p>Plenty of talking, but how many people actually read up to paragraph 7 (of 11) of the source article before they rushed to comment on it?</p>\n\n<h5>The Slate Experiment</h5>\n\n<p>In <a href=\"http://www.slate.com/articles/technology/technology/2013/06/how_people_read_online_why_you_won_t_finish_this_article.html\">You Won't Finish This Article</a>, Farhad Manjoo dares us to read to the end. </p>\n\n<blockquote>\n  <p>Only a small number of you are reading all the way through articles on the Web. I’ve long suspected this, because so many smart-alecks jump in to the comments to make points that get mentioned later in the piece.</p>\n</blockquote>\n\n<p>But most of us won't.</p>\n\n<p>He collected a bunch of analytics data based on real usage to prove his point:</p>\n\n<p><a href=\"http://www.slate.com/articles/technology/technology/2013/06/how_people_read_online_why_you_won_t_finish_this_article.html\"><img src=\"http://blog.codinghorror.com/content/images/2014/11/article-scroll-graph-slate.png\" alt=\"\" title=\"\"></a></p>\n\n<p>These experiments demonstrate that we don't need to incentivize talking. There's far too much talking already. <strong>We badly need to incentivize <em>listening</em></strong>.</p>\n\n<p>And online, listening = reading. That old school program from my childhood was right, so deeply fundamentally right. Reading. <a href=\"http://readingisfundamental.org/\">Reading Is Fundamental</a>.</p>\n\n<p>Let's say you're interested in World War II. Who would you rather have a discussion with about that? The guy who just skimmed the <a href=\"http://en.wikipedia.org/wiki/World_War_II\">Wikipedia article</a>, or the gal who read the entirety of <a href=\"http://www.amazon.com/dp/1451651686?tag=codihorr-20\">The Rise and Fall of the Third Reich</a>?</p>\n\n<p>This emphasis on talking and post count also unnecessarily penalizes lurkers. If you've posted five times in the last 10 years, but you've read every single thing your community has ever written, I can guarantee that you, Mr. or Mrs. Lurker, are a far more important part of that community's culture and social norms than someone who posted 100 times in the last two weeks. Value to a community should be measured every bit by <em>how much you've read</em> as much as how much you talked.</p>\n\n<p><a href=\"http://readingisfundamental.org/\"><img src=\"http://blog.codinghorror.com/content/images/2014/11/rif-logo-blue-large.png\" alt=\"\" title=\"\"></a></p>\n\n<p>So how do we encourage reading, exactly? </p>\n\n<p>You could do crazy stuff like require commenters to enter some fact from the article, or pass a basic quiz about what the article contained, before allowing them to comment on that article. On some sites, I think this would result in a huge improvement in the quality of the comments. It'd add friction to talking, which <a href=\"http://blog.codinghorror.com/training-your-users/\">isn't necessarily a bad thing</a>, but it's a negative, indirect way of <em>forcing</em> reading by denying talking. Not ideal.</p>\n\n<p>I have some better ideas.</p>\n\n<ol>\n<li><p><strong>Remove interruptions to reading, primarily pagination</strong>.</p>\n\n<p>Here's a radical idea: when you get to the bottom of the page, <em>load the next damn page automatically</em>. Isn't that the most natural thing to want when you reach the end of the page, to read the next one? Is there any time that you've ever been on the Internet reading an article, reached the bottom of page 1, and <em>didn't</em> want to continue reading? Pagination is nothing more than <a href=\"http://blog.codinghorror.com/the-end-of-pagination/\">an arbitrary barrier to reading</a>, and it needs to die a horrible death.</p>\n\n<p>There are sites that go even further here, such as The Daily Beast, which actually <em>loads the next article</em> when you reach the end of the one you are currently reading. <a href=\"http://www.thedailybeast.com/articles/2014/05/27/your-princess-is-in-another-castle-misogyny-entitlement-and-nerds.html\">Try it out and see what you think</a>. I don't know that I'd go that far (I like to pick the next thing I read, thanks very much), but it's interesting.</p></li>\n<li><p><strong>Measure read times and display them</strong>.</p>\n\n<p>What I do not measure, I cannot display as a number next to someone's name, and cannot properly encourage. In Discourse we measure how long each post has been visible in the browser for every (registered) user who encounters that post. Read time is a key metric we use to determine who we trust, and the best posts that people do actually read. If you aren't willing to visit a number of topics and spend time actually <em>listening</em> to us, why should we talk to you – or trust you.</p>\n\n<p>Forget clicks, forget page loads, measure <em>read time!</em> We've been measuring read times extensively since launch in 2013 and it turns out we're in good company: <a href=\"https://medium.com/data-lab/mediums-metric-that-matters-total-time-reading-86c4970837d5\">Medium</a> and <a href=\"http://blog.upworthy.com/post/75795679502/what-uniques-and-pageviews-leave-out-and-why-were\">Upworthy</a> both recently acknowledged the intrinsic power of this metric.</p></li>\n<li><p><strong>Give rewards for reading</strong>.</p>\n\n<p>I know, that old saw, gamification, but if you're going to reward someome, do it for the right things and the right reasons. For example, we created a badge for reading to the end of a long 100+ post topic. And our trust levels are based heavily on how often people are returning and how much they are reading, and virtually not at all on how much they post.</p>\n\n<p>To feel live reading rewards in action, try <a href=\"http://www.nytimes.com/2012/12/24/technology/all-the-worlds-a-game-and-business-is-a-player.html\">this classic New York Times Article</a>. There's even a badge for reading half the article! </p></li>\n<li><p><strong>Update in real time</strong>.</p>\n\n<p>Online we tend to read these conversations as they're being written, as people are engaging in live conversations. So if new content arrives, figure out a way to dynamically rez it in <em>without</em> interrupting people's read position. Preserve the back and forth, real time dynamic of an actual conversation. Show votes and kudos and likes as they arrive. If someone edits their post, bring that in too. All of this goes a long way toward making a stuffy old debate feel like a living, evolving thing versus a long distance email correspondence. </p></li>\n</ol>\n\n<p>These are strategies I pursued with <a href=\"http://www.discourse.org\">Discourse</a>, because I believe Reading Is Fundamental. Not just in grade school, but in your life, in my life, in every aspect of online community. To the extent that Discourse can help people learn to be better listeners and better readers – not just <em>more talkative</em> – we are succeeding.</p>\n\n<p>If you want to become a true radical, if you want to have deeper insights and better conversations, <strong>spend less time talking and more reading</strong>.</p>\n\n<table>  \n<tr><td>  \n[advertisement] <a href=\"http://careers.stackoverflow.com/\" rel=\"nofollow\">Stack Overflow Careers</a> matches the best developers (you!) with the best employers. You can search our <a href=\"http://careers.stackoverflow.com/jobs\" rel=\"nofollow\">job listings</a> or <a href=\"http://careers.stackoverflow.com/cv\" rel=\"nofollow\">create a profile</a> and even let employers find you.\n</td></tr>  \n</table>",
					"categories":[]
				},
				{
					"title":"The Tablet Turning Point",
					"link":"http://blog.codinghorror.com/the-tablet-turning-point/",
					"author":"Jeff Atwood",
					"publishedDate":"Mon, 10 Nov 2014 17:36:03 -0800",
					"contentSnippet":"Remember how people in the year 2000 used to say how crazy and ridiculous it was, the idea that Anyone Would Ever Run Photoshop ...",
					"content":"<p>Remember how people in the year 2000 used to say how crazy and ridiculous it was, the idea that Anyone Would Ever Run Photoshop in a Web Browser? I mean <em>come on</em>.</p>\n\n<p><a href=\"http://thenextweb.com/creativity/2014/02/24/9-browser-based-photo-editing-tools/\">Oops</a>. </p>\n\n<p>One of my big bets with <a href=\"http://www.discourse.org\">Discourse</a> is that eventually, <a href=\"http://blog.codinghorror.com/the-pc-is-over/\"><em>all</em> computers will be tablets of varying size</a>, with performance basically indistinguishable from a two year old desktop or laptop.</p>\n\n<p>Apps are <a href=\"http://blog.codinghorror.com/app-pocalypse-now/\">great and all</a>, but there has to be some place for this year&#39;s bumper crop of obscene amount of computing superpower to go. I like to use history as my guide, and I believe it&#39;s going exactly the same place it did on desktops and laptops — that no-installing-anything friend of every lazy user on the planet, the inevitable path of least resistance, the <strong>mobile web browser</strong>.</p>\n\n<p><a href=\"http://arstechnica.com/gadgets/2013/06/cupertinos-photocopiers-what-ios-7-borrowed-from-android/\"><img src=\"http://blog.codinghorror.com/content/images/2014/11/safarivschromemobile.jpg\" alt=\"\" title=\"\"></a></p>\n\n<p>For the last few years, I've been buying every significant tablet device in the run up to the big holiday sales season, and testing them all, to see how many years are left until mobile devices catch up to desktops on general web and JavaScript performance.</p>\n\n<p>How are we doing? Let's benchmark some Discourse client-side <a href=\"http://emberjs.com/\">Ember</a> JavaScript code:</p>\n\n<table style=\"width:500px\">  \n<tr>  \n  <td>iPhone 4</td>\n  <td>June 2011</td>\n  <td>2031ms</td>\n</tr>  \n<tr>  \n  <td>iPhone 5</td>\n  <td>Sept 2012</td>\n  <td>600ms</td>\n</tr>  \n<tr>  \n  <td>iPhone 5s</td>\n  <td>Sept 2013</td>\n  <td>300ms</td>\n</tr>  \n<tr>  \n  <td>iPhone 6</td>\n  <td>Sept 2014</td>\n  <td>250ms</td>\n</tr>  \n<tr>  \n  <td>iPad Air 2</td>\n  <td>Oct 2014</td>\n  <td>225ms</td>\n</tr>  \n</table>\n\n<p>My Core i4770k desktop machine scores <strong>180ms</strong> in the same benchmark on the latest version of Chrome x64. I'd say we're solidly within striking distance this year.</p>\n\n<p>I don't like to spend a lot of time talking about news and gadgets here, since the commentary will be irrelevant within a few years. But this year marks a key turning point for mobile and tablet performance, and I've lived with every iteration of these devices for the last couple of years, so I'll make an exception.</p>\n\n<p>Look at this <a href=\"http://www.anandtech.com/show/8666/the-apple-ipad-air-2-review/3\">performance rampage</a> the <strong>iPad Air 2</strong> goes on:</p>\n\n<p><img src=\"http://blog.codinghorror.com/content/images/2014/11/69018.png\" alt=\"\"></p>\n\n<p>Just look at it! <a href=\"http://www.anandtech.com/show/8666/the-apple-ipad-air-2-review/3\">All the graphs</a> are like this! </p>\n\n<p>It's hard to believe we now live in a world where the Apple \"Premium\" is no longer about aesthetics, but raw, unbridled, class-leading performance. And you know what? That's something I can totally get behind.</p>\n\n<p>Anyone who tells you the iPad Air 2 is some kind of incremental update must not actually use theirs. As someone who <em>does</em> regularly use his iPad, I can say without hesitation that this is a massively upgraded device. I grew to hate my old iPad Air because of the memory restrictions; I could barely have three tabs open in Mobile Safari without one of them paging out of memory. Thanks x64 and iOS7!</p>\n\n<p>The bonded screen, touchid, the now-adequate-for-x64 2GB of RAM, the amazingly fast triple core CPU, the GPU, and yeah, it's a little thinner. For performance, nothing else even comes close.</p>\n\n<p>It's so fast I sometimes forget I'm not using my <a href=\"http://www.microsoft.com/surface/en-us/products/surface-pro-3\">Surface Pro 3</a> with its 4GB RAM and Core i5 CPU. I get hassled when I bring my Surface to meetings, but I patiently explain that it&#39;s a very nice third gen hardware design with a fully integrated keyboard cover, IE11 is a great touch browser, and that I&#39;m mostly using the device as a tablet, as a sneak preview of what iPad 8 performance will look like. Based on today&#39;s benchmarks with the iPad Air 2 – chronologically, the iPad &quot;6&quot; – I believe that&#39;s about right.</p>\n\n<p>I also purchased a <a href=\"http://www.amazon.com/Google-Nexus-Tablet-8-9-Inch-Black/dp/B00M6UC5B4?tag=codihorr-20\"><strong>Nexus 9</strong></a>. It's the first device to ship with Android 5 and the vaunted Nvidia Tegra K1.</p>\n\n<p><a href=\"http://blog.codinghorror.com/the-tablet-turning-point/(http://www.amazon.com/Google-Nexus-Tablet-8-9-Inch-Black/dp/B00M6UC5B4?tag=codihorr-20)\"><img src=\"http://blog.codinghorror.com/content/images/2014/11/nexus-9-1.jpg\" alt=\"\" title=\"\"></a></p>\n\n<p>I'm <em>very</em> impressed with Android 5.0; aesthetically I think it's superior to iOS 8 in a lot of ways, and it is a clear step forward over Android 4. Anyone on older Android devices should definitely upgrade to Android 5 at their first opportunity.</p>\n\n<p>Performance-wise, it is what I've come to expect from Android: <a href=\"http://www.anandtech.com/show/8670/google-nexus-9-preliminary-findings/2\">erratic</a>. In our Discourse benchmarks, and the latest version of Chrome Android beta, it scores about 750ms, putting it somewhere between the 2011 iPhone 4s and the 2012 iPhone 5. That said, this is the fastest Android device I have ever laid hands on. I just wish it was consistently faster. A lot faster.</p>\n\n<p>To that end, I'd like to ask for your help. We've identified some <a href=\"https://code.google.com/p/v8/issues/detail?id=2935\">deep bugs in the Android Chrome V8 engine</a> that cause fairly severe performance issues with JavaScript frameworks like Angular and Ember. (Desktop Chrome performance remains class leading; this is highly specific to the Android version of Chrome.) If you know anyone at Google, please ping them about this and see if it can be escalated. I&#39;d love it if more Android users – including me – could have a better browser experience when using large JavaScript apps.</p>\n\n<p>I hope over the next year the remaining Android 5 performance bumps can be ironed out. I still like the Nexus 9; if you're a big fan of Google services like GMail, Docs, and Maps like I am, I definitely recommend it. The one I have will be a gift to my mom.</p>\n\n<table>  \n<tr><td>  \n[advertisement] How are you showing off your awesome? Create a <a href=\"http://careers.stackoverflow.com/cv\" rel=\"nofollow\">Stack Overflow Careers profile</a> and show off all of your hard work from Stack Overflow, Github, and virtually every other coding site. Who knows, you might even get recruited for a great <a href=\"http://careers.stackoverflow.com/jobs\" rel=\"nofollow\">new position</a>!\n</td></tr>  \n</table>",
					"categories":[]
				}
			]
		}
	},
	"responseDetails":null,
	"responseStatus":200
}